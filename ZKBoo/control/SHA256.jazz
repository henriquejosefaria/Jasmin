/******************************
*                             *
*  SHA256 auxiliar functions  *
*                             *
******************************/


fn ROTLEFT(reg u32 a, reg u8 b) -> reg u32{

	a = ((a << b) | (a >> (32 - b)));
	return a;
} 

fn ROTRIGHT(reg u32 a, reg u8 b) -> stack u32 {

	a = ((a >> b) | (a << (32 - b)));
	return a;
}

fn ROTRIGHT_2(reg u32 a) -> stack u32 {

	reg u32 a_aux;

	a_aux = a;

	a >>= 2;
	a_aux <<= 30;

	a |= a_aux;

	return a;
}

fn ROTRIGHT_13(reg u32 a) -> stack u32 {

	reg u32 a_aux;

	a_aux = a;

	a >>= 13;
	a_aux <<= 19;

	a |= a_aux;

	return a;
}

fn ROTRIGHT_22(reg u32 a) -> stack u32 {

	reg u32 a_aux;

	a_aux = a;

	a >>= 22;
	a_aux <<= 10;

	a |= a_aux;

	return a;
}

fn ROTRIGHT_6(reg u32 a) -> stack u32 {

	reg u32 a_aux;

	a_aux = a;

	a >>= 6;
	a_aux <<= 26;

	a |= a_aux;

	return a;
}

fn ROTRIGHT_11(reg u32 a) -> stack u32 {

	reg u32 a_aux;

	a_aux = a;

	a >>= 11;
	a_aux <<= 21;

	a |= a_aux;

	return a;
}

fn ROTRIGHT_25(reg u32 a) -> stack u32 {

	reg u32 a_aux;

	a_aux = a;

	a >>= 25;
	a_aux <<= 7;

	a |= a_aux;

	return a;
}


inline
fn EP0(stack u32 x) -> reg u32{

    reg u32 res, res1, res2;
    stack u32 r,r1,r2;


    res = x;
    res = ROTRIGHT_2(res);
    r = res;

    res1 = x;
    res1 = ROTRIGHT_13(res1);
    r1 = res1;


    res2 = x;
    res2 = ROTRIGHT_22(res2);
    r2 = res2;
    
    res = r;
    res1 = r1;
    res ^= res1;
    res2 = r2;
    res ^= res2;

    return res;
}

inline
fn EP1(stack u32 x) -> reg u32{

    reg u32 res, res1, res2;

    res = x;
    res = ROTRIGHT_6(res);

    res1 = x;
    res1 = ROTRIGHT_11(res1);
    
    res2 = x;
    res2 = ROTRIGHT_25(res2);

    res ^= res1;
    res ^= res2;

    return res;
} 


fn ROTRIGHT_7(reg u32 a) -> reg u32 {

	reg u32 a_aux;

	a_aux = a;

	a >>= 7;
	a_aux <<= 25;

	a ^= a_aux;

	return a;
}

fn ROTRIGHT_18(reg u32 a) -> reg u32 {

	reg u32 a_aux;

	a_aux = a;

	a >>= 18;
	a_aux <<= 14;

	a ^= a_aux;

	return a;
}

fn ROTRIGHT_17(reg u32 a) -> reg u32 {

	reg u32 a1, a2;

	a1 = a;
	a1 >>= 17;

    a2 = a;
	a2 <<= 15;

	a1 |= a2;

	return a1;
}

fn ROTRIGHT_19(reg u32 a) -> reg u32 {

	reg u32 a1, a2;

	a1 = a;
	a1 >>= 19;

    a2 = a;
	a2 <<= 13;

	a1 |= a2;

	return a1;
}

inline
fn SIG0(reg u32 x) -> reg u32 {

    reg u32 x0, x1;

    x0 = x;
    x0 = ROTRIGHT_7(x0);

    x1 = x;
    x1 = ROTRIGHT_18(x1);

    x >>= 3;

    x0 ^= x1;
    x0 ^= x;

    return x0;
}

inline
fn SIG1(reg u32 x) -> reg u32{
    reg u32 x0, x1, x2;

    x0 = x;
    x0 = ROTRIGHT_17(x0);
    
    x1 = x;
    x1 = ROTRIGHT_19(x1);

    x2 = x;
    x2 = (x2 >> 10); 

    x0 ^= x1;
    x0 ^= x2;

    return x0;
}

inline
fn CH(stack u32 x, stack u32 y, stack u32 z) -> reg u32{
    
    reg u32 t0, t1;

    t0 = x;
    t0 &= y;

    t1 = x;
    t1 ^= 0xFFFFFFFF;
    t1 &= z;

    t0 ^= t1;

    return t0;
}

inline
fn MAJ(stack u32 x, stack u32 y, stack u32 z) -> reg u32{

    reg u32 t0, t1, tx, ty, tz;

    t0 = x;
    ty = y;
    t0 = t0 & ty;

    t1 = x;
    tz = z;
    t1 &= tz;
    t0 ^= t1;

    t1 = y;
    tz = z;
    t1 &= tz;
    t0 ^= t1;

    return t0;
}

inline
fn initializeK(stack u32[64] k) -> stack u32[64]{
    k[0] = 0x428a2f98;
    k[1] = 0x71374491;
    k[2] = 0xb5c0fbcf;
    k[3] = 0xe9b5dba5;
    k[4] = 0x3956c25b;
    k[5] = 0x59f111f1;
    k[6] = 0x923f82a4;
    k[7] = 0xab1c5ed5;
    k[8] = 0xd807aa98;
    k[9] = 0x12835b01;
    k[10] = 0x243185be;
    k[11] = 0x550c7dc3;
    k[12] = 0x72be5d74;
    k[13] = 0x80deb1fe;
    k[14] = 0x9bdc06a7;
    k[15] = 0xc19bf174;
    k[16] = 0xe49b69c1;
    k[17] = 0xefbe4786;
    k[18] = 0x0fc19dc6;
    k[19] = 0x240ca1cc;
    k[20] = 0x2de92c6f;
    k[21] = 0x4a7484aa;
    k[22] = 0x5cb0a9dc;
    k[23] = 0x76f988da;
    k[24] = 0x983e5152;
    k[25] = 0xa831c66d;
    k[26] = 0xb00327c8;
    k[27] = 0xbf597fc7;
    k[28] = 0xc6e00bf3;
    k[29] = 0xd5a79147;
    k[30] = 0x06ca6351;
    k[31] = 0x14292967;
    k[32] = 0x27b70a85;
    k[33] = 0x2e1b2138;
    k[34] = 0x4d2c6dfc;
    k[35] = 0x53380d13;
    k[36] = 0x650a7354;
    k[37] = 0x766a0abb;
    k[38] = 0x81c2c92e;
    k[39] = 0x92722c85;
    k[40] = 0xa2bfe8a1;
    k[41] = 0xa81a664b;
    k[42] = 0xc24b8b70;
    k[43] = 0xc76c51a3;
    k[44] = 0xd192e819;
    k[45] = 0xd6990624;
    k[46] = 0xf40e3585;
    k[47] = 0x106aa070;
    k[48] = 0x19a4c116;
    k[49] = 0x1e376c08;
    k[50] = 0x2748774c;
    k[51] = 0x34b0bcb5;
    k[52] = 0x391c0cb3;
    k[53] = 0x4ed8aa4a;
    k[54] = 0x5b9cca4f;
    k[55] = 0x682e6ff3;
    k[56] = 0x748f82ee;
    k[57] = 0x78a5636f;
    k[58] = 0x84c87814;
    k[59] = 0x8cc70208;
    k[60] = 0x90befffa;
    k[61] = 0xa4506ceb;
    k[62] = 0xbef9a3f7;
    k[63] = 0xc67178f2;

    return k;
}

inline
fn dbl_int_add(stack u32[2] ctx_bitlen, reg u64 c) -> stack u32[2] {

	reg u32 a, b;
	
	a = ctx_bitlen[0];
	
	b = 0xffffffff;
	b -= c;

	if(a > b){
		a = ctx_bitlen[1];
		a += 1; 
		ctx_bitlen[1] = a;
	} else {
		a += c;
		ctx_bitlen[0] = a;
	}

	return ctx_bitlen;
}

inline
fn compute_t1(stack u32 e, stack u32 f, stack u32 g, stack u32 h, stack u32[64] k, stack u32[64] m, reg u64 i) -> reg u32{

	reg u32 t, t1;

	t1 = h;
		
	t = EP1(e);
	t1 += t;

	t = CH(e,f,g);
	t1 += t;

	t = k[(int)i];
	t1 += t;
	
	t = m[(int)i];
	t1 += t;

	return t1;
}

inline
fn compute_t2(stack u32 a, stack u32 b, stack u32 c) -> reg u32{
	
	reg u32 t, t2;


	t2 = EP0(a);
	
	t = MAJ(a, b, c); 
	t2 += t;
	

	return t2;
}

inline
fn sha256_transform(stack u32[8] ctx_state, stack u8[64] ctx_data, reg u64 state) -> stack u32[8], stack u8[64]
{
    stack u32 a, b, c, d, e, f, g, h;
    reg u32 t0, t1, t2, temp;

    stack u32[64] m;

    reg u32 sig0, sig1;

    reg u64 i, j,z;

    inline int idx;

    reg u8 t8;

    stack u32[64] k;
    k = initializeK(k);
    

    /* IGUAL!! */
    i = 0;
    z = 0;
    while(i < 16){

        t0 = ctx_data[u32 (int)i];

        t0 = #BSWAP_32(t0);

        m[(int)i] = t0;

        //(u32)[state + (int)z] = t0;
        //z += 4;

        i += 1;
    }
    

    /* IGUAL */
    z = 0;
    while(i < 64){

        j = i;
        j -= 2;
        temp = m[(int)j];
        temp = SIG1(temp);
        m[(int)i] = temp;

        j = i;
        j -= 7;
        temp =  m[(int)j];
        m[(int)i] += temp;

        j = i;
        j -= 15;
        temp = m[(int)j];
        temp = SIG0(temp);
        m[(int)i] += temp;

        j = i;
        j -= 16;
        temp =  m[(int)j];
        m[(int)i] += temp;

        /*
        if(i < 32){
            temp = m[(int)i];
            (u32)[state + (int)z] = temp;
            z += 4;
        }
        */
        
        i += 1;
    } 
    

    temp = ctx_state[0];
    a = temp;
    temp = ctx_state[1];
    b = temp;
    temp = ctx_state[2];
    c = temp;
    temp = ctx_state[3];
    d = temp;
    temp = ctx_state[4];
    e = temp;
    temp = ctx_state[5];
    f = temp;
    temp = ctx_state[6];
    g = temp;
    temp = ctx_state[7];
    h = temp;

    
    i = 0;
    j = 0;
    while(i < 64){

    	t1 = compute_t1(e, f, g, h, k, m, i);
    	t2 = compute_t2(a,b,c);
        
        /*
        if(i < 16){
            (u32)[state + (int) j] = t1;
        }
        */
        
        
        t0 = g;
        h = t0;

        t0 = f;
        g = t0;

        t0 = e;
        f = t0;

        t0 = d;
        t0 += t1;
        e = t0;


        t0 = c;
        d = t0;

        t0 = b;
        c = t0;

        t0 = a;
        b = t0;

        t0 = t1;
        t0 += t2;
        a = t0;

        j += 4;
        i += 1;
    }

    /*
    temp = a;
    (u32)[state + 0] = temp;
    temp = b;
    (u32)[state + 4] = temp;
    temp = c;
    (u32)[state + 8] = temp;
    temp = d;
    (u32)[state + 12] = temp;
    temp = e;
    (u32)[state + 16] = temp;
    temp = f;
    (u32)[state + 20] = temp;
    temp = g;
    (u32)[state + 24] = temp;
    temp = h;
    (u32)[state + 28] = temp;
    */

    temp = ctx_state[0];
    temp += a;
    ctx_state[0] = temp;

    temp = ctx_state[1];
    temp += b;
    ctx_state[1] = temp;

    temp = ctx_state[2];
    temp += c;
    ctx_state[2] = temp;

    temp = ctx_state[3];
    temp += d;
    ctx_state[3] = temp;

    temp = ctx_state[4];
    temp += e;
    ctx_state[4] = temp;

    temp = ctx_state[5];
    temp += f;
    ctx_state[5] = temp;

    temp = ctx_state[6];
    temp += g;
    ctx_state[6] = temp;

    temp = ctx_state[7];
    temp += h;
    ctx_state[7] = temp;

    /*
    i=0;
    z = 0;
    while(i < 7){

        t1 = ctx_state[(int)i];
        (u32)[state + (int)z] = t1;

        z += 4;
        i += 1;
    }
    */
    
    return ctx_state, ctx_data;
}


inline
fn sha256_update1(stack u32[8] ctx_state, stack u8[64] ctx_data, stack u64 ctx_datalen, stack u32[2] ctx_bitlen, stack u8[16] data, inline int len, reg u64 state) -> stack u32[8], stack u8[64], stack u64, stack u32[2]
{
    reg u64 i, temp;
    reg u8 t;
    stack u64 i_aux;
    reg u64 c;

    i = 0;
    while(i < len){

    	t = data[(int)i];
    	i_aux = i;

    	temp = ctx_datalen;
    	ctx_data[(int)temp] = t;
    	temp += 1;
    	ctx_datalen = temp;

    	if(temp == 64){
    		ctx_state, ctx_data = sha256_transform(ctx_state, ctx_data, state);
    		c = 512;
    		ctx_bitlen = dbl_int_add(ctx_bitlen,c);
    		ctx_datalen = 0;
    	}
    	
    	i = i_aux;
    	i += 1;
    }
    
    return ctx_state, ctx_data, ctx_datalen, ctx_bitlen;
}




inline
fn sha256_update2(stack u32[8] ctx_state, stack u8[64] ctx_data, stack u64 ctx_datalen, stack u32[2] ctx_bitlen, stack u8[64] data, inline int len, reg u64 state) -> stack u32[8], stack u8[64], stack u64, stack u32[2]
{
    reg u64 i, temp;
    reg u8 t;
    stack u64 i_aux;

    i = ctx_datalen;
    while(i < len){
        i_aux = i;
        t = data[(int)i];

        temp = ctx_datalen;
        ctx_data[(int)temp] = t;
        temp += 1;
        ctx_datalen = temp;

        if(ctx_datalen == 64){
            ctx_state, ctx_data = sha256_transform(ctx_state, ctx_data, state);
            temp = 512;
            ctx_bitlen = dbl_int_add(ctx_bitlen,temp);
            ctx_datalen = 0;
        }

        i = i_aux;
        i += 1;
    }
    return ctx_state, ctx_data, ctx_datalen, ctx_bitlen;
}

inline
fn sha256_update3(stack u32[8] ctx_state, stack u8[64] ctx_data, stack u64 ctx_datalen, stack u32[2] ctx_bitlen, stack u8[1480] data, inline int len, reg u64 state) -> stack u32[8], stack u8[64], stack u64, stack u32[2]
{
    reg u64 i, temp;
    reg u8 t;
    stack u64 i_aux;
    reg u32 c;

    i = 0;

    while(i < 64){
        t = data[(int)i];
        (u8)[state + (int) i] = t;
        i += 1;
    }

    i = 0;
    while(i < len){
        t = data[(int)i];

        temp = ctx_datalen;
        ctx_data[(int)temp] = t;
        temp += 1;
        ctx_datalen = temp;

        if(ctx_datalen == 64){
            ctx_state, ctx_data = sha256_transform(ctx_state, ctx_data, state);
            temp = 512;
            ctx_bitlen = dbl_int_add(ctx_bitlen,temp);
            ctx_datalen = 0;
        }

        i += 1;
    }
    return ctx_state, ctx_data, ctx_datalen, ctx_bitlen;
}


inline
fn sha256_update4(stack u32[8] ctx_state, stack u8[64] ctx_data, stack u64 ctx_datalen, stack u32[2] ctx_bitlen, stack u8[4] data, inline int len, reg u64 state) -> stack u32[8], stack u8[64], stack u64, stack u32[2]
{
    reg u64 i, temp;
    reg u8 t;
    stack u64 i_aux;

    temp = ctx_datalen;
    i = 0;
    while(i < len){
        t = data[(int)i];
        
        temp = ctx_datalen;
        ctx_data[(int)temp] = t;
        temp += 1;
        ctx_datalen = temp;

        if(temp == 64){
            ctx_state, ctx_data = sha256_transform(ctx_state, ctx_data, state);
            temp = 512;
            ctx_bitlen = dbl_int_add(ctx_bitlen,temp);
            ctx_datalen = 0;
        }

        i += 1;
    }

    /*
        i = 0;
        while(i < len){
            t = ctx_data[(int)i];
            (u8)[state + (int) i] = t;
            i += 1;
        }
    */

    return ctx_state, ctx_data, ctx_datalen, ctx_bitlen;
}

inline
fn sha256_final1(stack u32[8] ctx_state, stack u8[64] ctx_data, stack u64 ctx_datalen, stack u32[2] ctx_bitlen, reg u64 a, reg u64 round_idx, reg u64 player_idx, stack u64 mpcRounds, reg u64 state) -> stack u32[8], stack u8[64], reg u64
{
    reg u64 i, temp;
    reg u32 value;
    reg u32 stored_value;
    reg u64 a_temp;
    stack u64 i_aux;
    reg u8 t8;

    // Pad whatever data is left in the buffer.
    

    i = ctx_datalen;

    if (i < 56) {
        ctx_data[(int)i] = 0x80;
        i += 1;
        while (i < 56){
            ctx_data[(int)i] = 0x00;
            i += 1;
        }
    }    
    else {
        ctx_data[(int)i] = 0x80;
        i += 1;
        while (i < 64){
            ctx_data[(int)i] = 0x00;
            i += 1;
        }
        ctx_state, ctx_data = sha256_transform(ctx_state, ctx_data, state);

        i = 0;
        while(i < 56){
        	ctx_data[(int)i] = 0x00;
        	i += 1;
        }
    }

    //  IGUAL!!!
    /*
    i = 0;
    while(i < 64){
        t8 = ctx_data[(int)i]; 
        (u8)[state + (int)i] = t8;
        i += 1;
    }*/


    // Append to the padding the total message's length in bits and transform.
    

    temp = ctx_datalen;
    temp *= 8;
    ctx_bitlen = dbl_int_add(ctx_bitlen, temp);

    value = ctx_bitlen[0];
    value = #BSWAP_32(value);
    ctx_data[u32 15] = value;

    value = ctx_bitlen[1];
    value = #BSWAP_32(value);
    ctx_data[u32 14] = value;
	
	ctx_state, ctx_data = sha256_transform(ctx_state, ctx_data, state);
    

    /* Set addrs to a.h */

    a_temp = 32 * mpcRounds;
    a_temp *= 3;

    /* Set addrs to a.h[player_idx] */

    temp = player_idx;
    temp *= 32;
    temp *= mpcRounds;

    a_temp += temp;

    /* Set current roud hash position */

    temp = 32 * round_idx;

    a_temp += temp;

    
    i = 0;
    while(i < 8){

    	value = ctx_state[(int)i];

    	value = #BSWAP_32(value);

    	(u32)[a + (int)a_temp] = value;

    	a_temp += 4;
    	i += 1;
    }
    

    return ctx_state, ctx_data, a; 
}

/*****************
*                *
*   H - SHA256   *
*                *
*****************/

export
fn my_H(reg u64 keys_shares, reg u64 views, reg u64 rs, reg u64 a, reg u64 state) {

	reg u64 i, j, z, temp, keys_addrs, views_addrs, rs_addrs, aux_z, views_x, aux;

	stack u64 ctx_datalen;
	stack u32[2] ctx_bitlen;
	stack u32[8] ctx_state;
    stack u8[64] ctx_data;

    stack u64 mpcRounds;

	stack u8[16] keys_aux;
	stack u8[64] viewsX_aux;
	stack u8[1480] viewsY_aux;
	stack u8[4] rs_aux;

	reg u8 data;
	reg u8 len;

    mpcRounds = 1;

	i = 0;
    while(i < mpcRounds){

        j = 0;
        while(j < 1){

            ctx_datalen = 0;
            ctx_bitlen[0] = 0;
            ctx_bitlen[1] = 0;
            ctx_state[0] = 0x6a09e667;
            ctx_state[1] = 0xbb67ae85;
            ctx_state[2] = 0x3c6ef372;
            ctx_state[3] = 0xa54ff53a;
            ctx_state[4] = 0x510e527f;
            ctx_state[5] = 0x9b05688c;
            ctx_state[6] = 0x1f83d9ab;
            ctx_state[7] = 0x5be0cd19;

            /* Keys */


            keys_addrs = j * 16;
            keys_addrs *= mpcRounds;


            temp = i * 16;
            keys_addrs += temp;

            z = 0;
            while(z < 16){

                data = (u8)[keys_shares + (int)keys_addrs];
                keys_aux[(int)z] = data;
                //(u8)[state + (int)keys_addrs] = data;

                keys_addrs += 1;
                z += 1;
            } 

            /* Views.x */

            views_addrs = j;
            views_addrs *= 64;
            views_addrs *= mpcRounds;

            temp = i;
            temp *= 64;
            views_addrs += temp;

            z = 0;
            while(z < 64){

                viewsX_aux[(int)z] = (u8)[views + (int)views_addrs];

                (u8)[state + (int)z] = (u8)[views + (int)views_addrs];

                views_addrs += 1;
                z += 1;
            }



            /* Views.y */

            views_addrs = j;
            views_addrs *= 1480;
            views_addrs *= mpcRounds;

            views_x = 64 * mpcRounds;
            views_x *= 3;
            views_addrs += views_x;

            temp = i;
            temp *= 1480;
            views_addrs += temp;

            z = 0; 
            while(z < 1480){

                viewsY_aux[(int)z] = (u8)[views + (int) views_addrs];

                views_addrs += 1;
                z += 1;
            } 

            /* rs */

            rs_addrs = j;
            rs_addrs *= 4;
            rs_addrs *= mpcRounds;

            temp = i;
            temp *= 4;
            rs_addrs += temp;

            z = 0;
            while(z < 4){
                rs_aux[(int)z] = (u8)[rs + (int) rs_addrs];
                rs_addrs += 1;
                z += 1;
            }


            //ctx_state, ctx_data, ctx_datalen, ctx_bitlen = sha256_update1(ctx_state, ctx_data, ctx_datalen, ctx_bitlen, keys_aux, 16, state);

            ctx_state, ctx_data, ctx_datalen, ctx_bitlen = sha256_update2(ctx_state, ctx_data, ctx_datalen, ctx_bitlen, viewsX_aux, 64, state);
            ctx_state, ctx_data, ctx_datalen, ctx_bitlen = sha256_update3(ctx_state, ctx_data, ctx_datalen, ctx_bitlen, viewsY_aux, 1480, state);
            
            //ctx_state, ctx_data, ctx_datalen, ctx_bitlen = sha256_update4(ctx_state, ctx_data, ctx_datalen, ctx_bitlen, rs_aux, 4, state);
            
            ctx_state, ctx_data, a = sha256_final1(ctx_state, ctx_data, ctx_datalen, ctx_bitlen, a, i, j, mpcRounds, state);


            j += 1;
        }

        i += 1;
    }

}

/*
    
Cuidado! 

    - Esta versão testa o hash apenas para o jogador 0!
    - Esta versão não tem acesso aos commits do jogador!



*/
