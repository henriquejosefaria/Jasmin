


inline
fn GETBIT_u32_v2(reg u8 x, reg u64 bit_idx) -> reg u8 {

    while(bit_idx > 0){
        x = x >> 1;
        bit_idx -= 1;
    }

    x &= 0x01; 
    
    return x;   
}

inline
fn GETBIT_EXTENDED(stack u32[8] aux, reg u64 bit_idx) -> reg u8 {

    reg u8 selectedBit;
    reg u64 bit_aux;
    reg u64 byte_aux;
    
    bit_aux = bit_idx;
    byte_aux = 0;

    while(bit_aux >= 8){
        byte_aux += 1;
        bit_aux -= 8;
    }

    selectedBit = aux[u8 (int)byte_aux];

    selectedBit = GETBIT_u32_v2(selectedBit, bit_aux);

    return  selectedBit;    
}



fn ROTLEFT(reg u32 a, reg u8 b) -> reg u32{

    a = ((a << b) | (a >> (32 - b)));
    return a;
} 

fn ROTRIGHT(reg u32 a, reg u8 b) -> stack u32 {

    a = ((a >> b) | (a << (32 - b)));
    return a;
}

fn ROTRIGHT_2(reg u32 a) -> stack u32 {

    reg u32 a_aux;

    a_aux = a;

    a >>= 2;
    a_aux <<= 30;

    a_aux |= a;

    return a_aux;
}

fn ROTRIGHT_13(reg u32 a) -> stack u32 {

    reg u32 a_aux;

    a_aux = a;

    a >>= 13;
    a_aux <<= 19;

    a_aux |= a;

    return a_aux;
}

fn ROTRIGHT_22(reg u32 a) -> stack u32 {

    reg u32 a_aux;

    a_aux = a;

    a >>= 22;
    a_aux <<= 10;

    a_aux |= a;

    return a_aux;
}

fn ROTRIGHT_6(reg u32 a) -> stack u32 {

    reg u32 a_aux;

    a_aux = a;

    a >>= 6;
    a_aux <<= 26;

    a_aux |= a;

    return a_aux;
}

fn ROTRIGHT_11(reg u32 a) -> stack u32 {

    reg u32 a_aux;

    a_aux = a;

    a >>= 11;
    a_aux <<= 21;

    a_aux |= a;

    return a_aux;
}

fn ROTRIGHT_25(reg u32 a) -> stack u32 {

    reg u32 a_aux;

    a_aux = a;

    a >>= 25;
    a_aux <<= 7;

    a_aux |= a;

    return a_aux;
}


inline
fn EP0(reg u32 x) -> reg u32{

    reg u32 res, r;

    r = x;
    r = ROTRIGHT_2(r);
    r = res;

    res = x;
    res = ROTRIGHT_13(res);
    r ^= res;

    res = x;
    res = ROTRIGHT_22(res);
    r ^= res;

    return r;
}

inline
fn EP1(stack u32 x) -> reg u32{

    reg u32 r, res;

    r = x;
    r = ROTRIGHT_6(r);

    res = x;
    res = ROTRIGHT_11(res);
    r ^= res;
    
    res = ROTRIGHT_25(res);
    r ^= res;

    return r;
} 


fn ROTRIGHT_7(reg u32 a) -> reg u32 {

    reg u32 a_aux;

    a_aux = a;

    a >>= 7;
    a_aux <<= 25;

    a ^= a_aux;

    return a;
}

fn ROTRIGHT_18(reg u32 a) -> reg u32 {

    reg u32 a_aux;

    a_aux = a;

    a >>= 18;
    a_aux <<= 14;

    a ^= a_aux;

    return a;
}

fn ROTRIGHT_17(reg u32 a) -> reg u32 {

    reg u32 a1, a2;

    a1 = a;
    a1 >>= 17;

    a2 = a;
    a2 <<= 15;

    a1 |= a2;

    return a1;
}

fn ROTRIGHT_19(reg u32 a) -> reg u32 {

    reg u32 a1, a2;

    a1 = a;
    a1 >>= 19;

    a2 = a;
    a2 <<= 13;

    a1 |= a2;

    return a1;
}
inline
fn SIG0(reg u32 x) -> reg u32 {

    reg u32 x0, x1;

    x0 = x;
    x0 = ROTRIGHT_7(x0);

    x1 = x;
    x1 = ROTRIGHT_18(x1);

    x >>= 3;

    x0 ^= x1;
    x0 ^= x;

    return x0;
}

inline
fn SIG1(reg u32 x) -> reg u32{
    reg u32 x0, x1, x2;

    x0 = x;
    x0 = ROTRIGHT_17(x0);
    
    x1 = x;
    x1 = ROTRIGHT_19(x1);

    x2 = x;
    x2 >>= 10; 

    x0 ^= x1;
    x0 ^= x2;

    return x0;
}

inline
fn CH(stack u32 x, stack u32 y, stack u32 z) -> reg u32{
    
    reg u32 t0, t1;

    t0 = x;
    t0 &= y;

    t1 = x;
    t1 ^= 0xFFFFFFFF;
    t1 &= z;

    t0 ^= t1;

    return t0;
}

inline
fn MAJ(stack u32 x, stack u32 y, stack u32 z) -> reg u32{

    reg u32 t0, t1;

    t0 = x;
    t0 &= y;

    t1 = x;
    t1 &= z;
    t0 ^= t1;

    t1 = y;
    t1 &= z;
    t0 ^= t1;

    return t0;
}

inline
fn initializeK(stack u32[64] k) -> stack u32[64]{
    k[0] = 0x428a2f98;
    k[1] = 0x71374491;
    k[2] = 0xb5c0fbcf;
    k[3] = 0xe9b5dba5;
    k[4] = 0x3956c25b;
    k[5] = 0x59f111f1;
    k[6] = 0x923f82a4;
    k[7] = 0xab1c5ed5;
    k[8] = 0xd807aa98;
    k[9] = 0x12835b01;
    k[10] = 0x243185be;
    k[11] = 0x550c7dc3;
    k[12] = 0x72be5d74;
    k[13] = 0x80deb1fe;
    k[14] = 0x9bdc06a7;
    k[15] = 0xc19bf174;
    k[16] = 0xe49b69c1;
    k[17] = 0xefbe4786;
    k[18] = 0x0fc19dc6;
    k[19] = 0x240ca1cc;
    k[20] = 0x2de92c6f;
    k[21] = 0x4a7484aa;
    k[22] = 0x5cb0a9dc;
    k[23] = 0x76f988da;
    k[24] = 0x983e5152;
    k[25] = 0xa831c66d;
    k[26] = 0xb00327c8;
    k[27] = 0xbf597fc7;
    k[28] = 0xc6e00bf3;
    k[29] = 0xd5a79147;
    k[30] = 0x06ca6351;
    k[31] = 0x14292967;
    k[32] = 0x27b70a85;
    k[33] = 0x2e1b2138;
    k[34] = 0x4d2c6dfc;
    k[35] = 0x53380d13;
    k[36] = 0x650a7354;
    k[37] = 0x766a0abb;
    k[38] = 0x81c2c92e;
    k[39] = 0x92722c85;
    k[40] = 0xa2bfe8a1;
    k[41] = 0xa81a664b;
    k[42] = 0xc24b8b70;
    k[43] = 0xc76c51a3;
    k[44] = 0xd192e819;
    k[45] = 0xd6990624;
    k[46] = 0xf40e3585;
    k[47] = 0x106aa070;
    k[48] = 0x19a4c116;
    k[49] = 0x1e376c08;
    k[50] = 0x2748774c;
    k[51] = 0x34b0bcb5;
    k[52] = 0x391c0cb3;
    k[53] = 0x4ed8aa4a;
    k[54] = 0x5b9cca4f;
    k[55] = 0x682e6ff3;
    k[56] = 0x748f82ee;
    k[57] = 0x78a5636f;
    k[58] = 0x84c87814;
    k[59] = 0x8cc70208;
    k[60] = 0x90befffa;
    k[61] = 0xa4506ceb;
    k[62] = 0xbef9a3f7;
    k[63] = 0xc67178f2;

    return k;
}

inline
fn dbl_int_add(stack u32[2] ctx_bitlen, reg u64 c) -> stack u32[2] {

    reg u32 a, b;
    
    a = ctx_bitlen[0];
    
    b -= c;

    if(a > 0xffffffff){
        ctx_bitlen[1] += 1;
    } else {
        ctx_bitlen[0] += c;
    }

    return ctx_bitlen;
}

inline
fn compute_t1(stack u32 e, stack u32 f, stack u32 g, stack u32 h, reg u32 k, reg u32 m) -> reg u32{

    reg u32 t, t1;

    t1 = h;
        
    t = EP1(e);
    t1 += t;

    t = CH(e,f,g);
    t1 += t;

    t1 += k;
    
    t1 += m;

    return t1;
}

inline
fn compute_t2(stack u32 a, stack u32 b, stack u32 c) -> reg u32{
    
    reg u32 ar, br, cr, t, t2;

    ar = a;
    br = b;
    cr = c;

    t2 = EP0(ar);
    
    t = MAJ(ar, br, cr); 
    t2 += t;
    

    return t2;
}

inline
fn sha256_transform(stack u32[8] ctx_state, stack u8[64] ctx_data, stack u32[64] k) -> stack u32[8], stack u8[64]
{
    stack u32 a, b, c, d, e, f, g, h;
    reg u32 t0, t1, t2, temp;

    stack u32[64] m;

    reg u32 sig0, sig1;

    reg u64 i, j;

    inline int idx;

    reg u8 t8;

    i = 0;
    while(i < 16){

        t0 = ctx_data[u32 (int)i];

        t0 = #BSWAP_32(t0);

        m[(int)i] = t0;

        i += 1;
    }
    

    /* IGUAL */
    while(i < 64){

        j = i;
        j -= 2;
        temp = m[(int)j];
        temp = SIG1(temp);
        m[(int)i] = temp;

        j = i;
        j -= 7;
        temp =  m[(int)j];
        m[(int)i] += temp;

        j = i;
        j -= 15;
        temp = m[(int)j];
        temp = SIG0(temp);
        m[(int)i] += temp;

        j = i;
        j -= 16;
        temp =  m[(int)j];
        m[(int)i] += temp;
        
        i += 1;
    } 
    

    temp = ctx_state[0];
    a = temp;
    temp = ctx_state[1];
    b = temp;
    temp = ctx_state[2];
    c = temp;
    temp = ctx_state[3];
    d = temp;
    temp = ctx_state[4];
    e = temp;
    temp = ctx_state[5];
    f = temp;
    temp = ctx_state[6];
    g = temp;
    temp = ctx_state[7];
    h = temp;


    // 12000 => 4000
    
    i = 0;
    while(i < 64){

        t1 = k[(int)i];
        t2 = m[(int)i];

        t1 = compute_t1(e, f, g, h, t1, t2);
        t2 = compute_t2(a,b,c);
        
        t0 = g;
        h = t0;

        t0 = f;
        g = t0;

        t0 = e;
        f = t0;

        t0 = d;
        t0 += t1;
        e = t0;


        t0 = c;
        d = t0;

        t0 = b;
        c = t0;

        t0 = a;
        b = t0;

        t1 += t2;
        a = t0;

        i += 1;
    }
    

    temp = ctx_state[0];
    temp += a;
    ctx_state[0] = temp;

    temp = ctx_state[1];
    temp += b;
    ctx_state[1] = temp;

    temp = ctx_state[2];
    temp += c;
    ctx_state[2] = temp;

    temp = ctx_state[3];
    temp += d;
    ctx_state[3] = temp;

    temp = ctx_state[4];
    temp += e;
    ctx_state[4] = temp;

    temp = ctx_state[5];
    temp += f;
    ctx_state[5] = temp;

    temp = ctx_state[6];
    temp += g;
    ctx_state[6] = temp;

    temp = ctx_state[7];
    temp += h;
    ctx_state[7] = temp;
    
    return ctx_state, ctx_data;
}


inline
fn sha256_update(stack u32[8] ctx_state, stack u8[64] ctx_data, stack u64 ctx_datalen, stack u32[2] ctx_bitlen, reg u64 data, inline int len, stack u32[64] k) -> stack u32[8], stack u8[64], stack u64, stack u32[2]
{
    reg u64 i, temp;
    reg u64 t;

    temp = ctx_datalen;
    temp >>= 3;

    i = 0;
    while(i < len){
        t = (u64)[data + (int)i];
        
        ctx_data[u64 (int)temp] = t;
        temp += 1;
        
        if(temp == 8){
            ctx_state, ctx_data = sha256_transform(ctx_state, ctx_data, k);
            temp = 512;
            ctx_bitlen = dbl_int_add(ctx_bitlen,temp);
            temp = 0;
        }

        i += 8;
    }

    temp <<= 3;
    ctx_datalen = temp;

    return ctx_state, ctx_data, ctx_datalen, ctx_bitlen;
}

inline
fn sha256_update2(stack u32[8] ctx_state, stack u8[64] ctx_data, stack u64 ctx_datalen, stack u32[2] ctx_bitlen, reg u64 data, inline int len, stack u32[64] k) -> stack u32[8], stack u8[64], stack u64, stack u32[2]
{
    reg u64 i, temp;
    reg u32 t;

    temp = ctx_datalen;

    temp >>= 2;

    i = 0;
    while(i < len){
        t = (u32)[data + (int)i];
        
        ctx_data[u32 (int)temp] = t;
        temp += 1;
        
        if(temp == 16){
            ctx_state, ctx_data = sha256_transform(ctx_state, ctx_data, k);
            temp = 512;
            ctx_bitlen = dbl_int_add(ctx_bitlen, temp);
            temp = 0;
        }

        i += 4;
    }

    temp <<= 2;
    ctx_datalen = temp;

    return ctx_state, ctx_data, ctx_datalen, ctx_bitlen;
}

inline
fn sha256_final(stack u32[8] ctx_state, stack u8[64] ctx_data, stack u64 ctx_datalen, stack u32[2] ctx_bitlen, reg u64 finalHash, stack u32[64] k)
{
    reg u64 i, temp;
    reg u32 value;

    // Pad whatever data is left in the buffer.
    

    i = ctx_datalen;

    if (i < 56) {
        ctx_data[(int)i] = 0x80;
        i += 1;
        while (i < 56){
            ctx_data[(int)i] = 0x00;
            i += 1;
        }
    }    
    else {
        ctx_data[(int)i] = 0x80;
        i += 1;
        while (i < 64){
            ctx_data[(int)i] = 0x00;
            i += 1;
        }
        ctx_state, ctx_data = sha256_transform(ctx_state, ctx_data, k);

        i = 0;
        while(i < 56){
            ctx_data[(int)i] = 0x00;
            i += 1;
        }
    }


    // Append to the padding the total message's length in bits and transform.
    

    temp = ctx_datalen;
    temp *= 8;
    ctx_bitlen = dbl_int_add(ctx_bitlen, temp);

    value = ctx_bitlen[0];
    value = #BSWAP_32(value);
    ctx_data[u32 15] = value;

    value = ctx_bitlen[1];
    value = #BSWAP_32(value);
    ctx_data[u32 14] = value;
    
    ctx_state, ctx_data = sha256_transform(ctx_state, ctx_data, k);

    temp = 0;    
    i = 0;
    while(i < 8){

        value = ctx_state[(int)i];

        value = #BSWAP_32(value);

        (u32)[finalHash + (int)temp] = value;

        temp += 4;
        i += 1;
    } 
}


/*****************
*                *
*   H - SHA256   *
*                *
*****************/


export
fn H(reg u64 keys, reg u64 localViews, reg u64 rs, reg u64 a) {
    

    stack u64 ctx_datalen;
    stack u32[2] ctx_bitlen;
    stack u32[8] ctx_state;
    stack u8[64] ctx_data;

    stack u32[64] k;

    reg u64 aux;

    ctx_datalen = 0;
    ctx_bitlen[0] = 0;
    ctx_bitlen[1] = 0;
    ctx_state[0] = 0x6a09e667;
    ctx_state[1] = 0xbb67ae85;
    ctx_state[2] = 0x3c6ef372;
    ctx_state[3] = 0xa54ff53a;
    ctx_state[4] = 0x510e527f;
    ctx_state[5] = 0x9b05688c;
    ctx_state[6] = 0x1f83d9ab;
    ctx_state[7] = 0x5be0cd19;

    k = initializeK(k);

    ctx_state, ctx_data, ctx_datalen, ctx_bitlen = sha256_update(ctx_state, ctx_data, ctx_datalen, ctx_bitlen, keys, 16, k);

    ctx_state, ctx_data, ctx_datalen, ctx_bitlen = sha256_update(ctx_state, ctx_data, ctx_datalen, ctx_bitlen, localViews, 1544, k);
    
    ctx_state, ctx_data, ctx_datalen, ctx_bitlen = sha256_update2(ctx_state, ctx_data, ctx_datalen, ctx_bitlen, rs, 4, k);
    
    sha256_final(ctx_state, ctx_data, ctx_datalen, ctx_bitlen, a, k);
}







inline
fn sha256_updateH3(stack u32[8] ctx_state, stack u8[64] ctx_data, stack u64 ctx_datalen, stack u32[2] ctx_bitlen, reg u64 data, inline int len, stack u32[64] k) -> stack u32[8], stack u8[64], stack u64, stack u32[2]
{
    reg u64 i, temp;
    reg u32 t;

    temp = ctx_datalen;
    temp >>= 2;
    i = 0;
    while(i < len){
        t = (u32)[data + (int)i];
        
        ctx_data[u32 (int)temp] = t;
        temp += 1;
        
        if(temp == 16){
            ctx_state, ctx_data = sha256_transform(ctx_state, ctx_data, k);
            temp = 512;
            ctx_bitlen = dbl_int_add(ctx_bitlen,temp);
            temp = 0;
        }

        i += 4;
    }

    temp <<= 2;
    ctx_datalen = temp;


    return ctx_state, ctx_data, ctx_datalen, ctx_bitlen;
}

inline
fn sha256_update3(stack u32[8] ctx_state, stack u8[64] ctx_data, stack u64 ctx_datalen, stack u32[2] ctx_bitlen, stack u32[8] data, inline int len, stack u32[64] k) -> stack u32[8], stack u8[64], stack u64, stack u32[2]
{
    reg u64 i, temp;
    reg u32 t;

    temp = ctx_datalen;

    temp >>= 2;

    i = 0;
    while(i < len){
        t = data[(int)i];
        
        ctx_data[u32 (int)temp] = t;
        temp += 1;
        
        if(temp == 16){
            ctx_state, ctx_data = sha256_transform(ctx_state, ctx_data, k);
            temp = 512;
            ctx_bitlen = dbl_int_add(ctx_bitlen, temp);
            temp = 0;
        }

        i += 1;
    }

    temp <<= 2;
    ctx_datalen = temp;

    return ctx_state, ctx_data, ctx_datalen, ctx_bitlen;
}
inline
fn sha256_update4(stack u32[8] ctx_state, stack u8[64] ctx_data, stack u64 ctx_datalen, stack u32[2] ctx_bitlen, reg u64 data, inline int len, stack u32[64] k) -> stack u32[8], stack u8[64], stack u64, stack u32[2]
{
    reg u64 i, temp;
    reg u64 t;
    reg u32 t32;


    temp = ctx_datalen;
    temp >>= 2;

    t32 = (u32)[data + 0];
        
    ctx_data[u32 (int)temp] = t32;
    temp += 1;

    temp <<= 2;
    temp >>= 3;
    
    i = 4;
    while(i < len){
        t = (u64)[data + (int)i];
        
        ctx_data[u64 (int)temp] = t;
        temp += 1;
        
        if(temp == 8){
            ctx_state, ctx_data = sha256_transform(ctx_state, ctx_data, k);
            temp = 512;
            ctx_bitlen = dbl_int_add(ctx_bitlen, temp);
            temp = 0;
        }

        i += 8;
    }

    // Becouse of the adjustments we did to copy the first 4 bytes of data to ctx_data, our data is no longer of multiple of 8 but of 4; To fix this we need to copy the last 4 bytes after iteration!

    temp <<= 3;
    temp >>= 2;

    t32 = (u32)[data + 26108];
        
    ctx_data[u32 (int)temp] = t32;
    temp += 1;
    temp <<= 2;
    ctx_datalen = temp;

    return ctx_state, ctx_data, ctx_datalen, ctx_bitlen;
}


inline
fn sha256_finalH3(stack u32[8] ctx_state, stack u8[64] ctx_data, stack u64 ctx_datalen, stack u32[2] ctx_bitlen, stack u32[8] hash, stack u32[64] k) -> stack u32[8], stack u8[64], stack u32[2], stack u32[8]
{
    reg u64 i, temp;
    reg u64 j;
    reg u32 t, value, stored_value;


    // Pad whatever data is left in the buffer.

    i = ctx_datalen;

    if (i < 56) {
        ctx_data[(int)i] = 0x80;
        i += 1;
        while (i < 56){
            ctx_data[(int)i] = 0x00;
            i += 1;
        }
    }    
    else {
        ctx_data[(int)i] = 0x80;
        i += 1;
        while (i < 64){
            ctx_data[(int)i] = 0x00;
            i += 1;
        }
        ctx_state, ctx_data = sha256_transform(ctx_state, ctx_data, k);

        i = 0;
        while(i < 56){
            ctx_data[(int)i] = 0x00;
            i += 1;
        }
    }


    // Append to the padding the total message's length in bits and transform.
    

    temp = ctx_datalen;
    temp *= 8;
    ctx_bitlen = dbl_int_add(ctx_bitlen, temp);


    value = ctx_bitlen[0];
    value = #BSWAP_32(value);
    ctx_data[u32 15] = value;

    value = ctx_bitlen[1];
    value = #BSWAP_32(value);
    ctx_data[u32 14] = value;
    
    ctx_state, ctx_data = sha256_transform(ctx_state, ctx_data, k);


    // Since this implementation uses little endian byte ordering and SHA uses big endian,
    // reverse all the bytes when copying the final state to the output hash.
    
    i = 0;
    while(i < 8){

        value = ctx_state[(int)i];

        value = #BSWAP_32(value);

        hash[(int)i] = value;

        i += 1;
    }
    

    return ctx_state, ctx_data, ctx_bitlen, hash;
}

/*****************
*                *
*       H3       *
*                *
*****************/


export
fn H3 (reg u64 finalHash, reg u64 as, reg u64 es) {

    stack u32[8] hash; // unsigned char hash[SHA256_DIGEST_LENGTH];
    
    stack u8[64] ctx_data;
    stack u64 ctx_datalen;
    stack u32[2] ctx_bitlen;
    stack u32[8] ctx_state;

    stack u32[64] k;

    reg u64 i, j, z, es_aux, temp;
    reg u64 bitTracker;
    reg u8 b1, b2;

    reg u64 len;

    reg u32 t;

    reg u64 counter;

    ctx_datalen = 0;
    ctx_bitlen[0] = 0;
    ctx_bitlen[1] = 0;
    ctx_state[0] = 0x6a09e667;
    ctx_state[1] = 0xbb67ae85;
    ctx_state[2] = 0x3c6ef372;
    ctx_state[3] = 0xa54ff53a;
    ctx_state[4] = 0x510e527f;
    ctx_state[5] = 0x9b05688c;
    ctx_state[6] = 0x1f83d9ab;
    ctx_state[7] = 0x5be0cd19;

    k = initializeK(k);

    ctx_state, ctx_data, ctx_datalen, ctx_bitlen = sha256_updateH3(ctx_state, ctx_data, ctx_datalen, ctx_bitlen, finalHash, 20, k);

    // Here we set the lengt to length(as) - 8 because we need to make performance adjustments 
    // (copy u64 instead of u32)

    ctx_state, ctx_data, ctx_datalen, ctx_bitlen = sha256_update4(ctx_state, ctx_data, ctx_datalen, ctx_bitlen, as, 26108, k);

    ctx_state, ctx_data, ctx_bitlen, hash = sha256_finalH3(ctx_state, ctx_data, ctx_datalen, ctx_bitlen, hash, k);

        
    //Pick bits from hash
    i = 0;
    bitTracker = 0;
    len = 136;              // Nr de rondas
    len *= 8;

    
    while(i < len) {

        if(bitTracker >= 256) { //Generate new hash

            ctx_datalen = 0;
            ctx_bitlen[0] = 0;
            ctx_bitlen[1] = 0;
            ctx_state[0] = 0x6a09e667;
            ctx_state[1] = 0xbb67ae85;
            ctx_state[2] = 0x3c6ef372;
            ctx_state[3] = 0xa54ff53a;
            ctx_state[4] = 0x510e527f;
            ctx_state[5] = 0x9b05688c;
            ctx_state[6] = 0x1f83d9ab;
            ctx_state[7] = 0x5be0cd19;


            ctx_state, ctx_data, ctx_datalen, ctx_bitlen = sha256_update3(ctx_state, ctx_data, ctx_datalen, ctx_bitlen, hash, 8 ,k);
            ctx_state, ctx_data, ctx_bitlen, hash = sha256_finalH3(ctx_state, ctx_data, ctx_datalen, ctx_bitlen, hash, k);

            bitTracker = 0;
        }
        
        b1 = GETBIT_EXTENDED(hash, bitTracker);
        bitTracker += 1;
        b2 = GETBIT_EXTENDED(hash, bitTracker);
        
        if(b1 == 0) {
            if(b2 == 0) {
                j = 0;
                (u64)[es + (int)i] = j;
                i += 8;
            } else {
                j = 1;
                (u64)[es + (int)i] = j;
                i += 8;
            }
        } 
        else {
            if(b2 == 0) {
                j = 2;
                (u64)[es + (int)i] = j;
                i += 8;
            }
        }

        bitTracker += 1;                // alredy added 1 priviously!!
    }
}






export
fn reconstruct(reg u64 y0, reg u64 y1, reg u64 y2, reg u64 result) {

    reg u64 aux;

    aux = (u64)[y0 + 0];
    aux ^= (u64)[y1 + 0];
    aux ^= (u64)[y2 + 0];
    (u64)[result + 0] = aux;

    aux = (u64)[y0 + 8];
    aux ^= (u64)[y1 + 8];
    aux ^= (u64)[y2 + 8];
    (u64)[result + 8] = aux;

    aux = (u64)[y0 + 16];
    aux ^= (u64)[y1 + 16];
    aux ^= (u64)[y2 + 16];
    (u64)[result + 16] = aux;

    aux = (u64)[y0 + 24];
    aux ^= (u64)[y1 + 24];
    aux ^= (u64)[y2 + 24];
    (u64)[result + 24] = aux;
}


inline
fn GETBIT_u32_inline(reg u32 x, inline int bit_idx) -> reg u32 {
    
    reg u64 aux;

    x = x >> bit_idx;

    x &= 0x00000001; 
    
    return x;   
}


inline
fn mpc_xor2(stack u32[2] x, stack u32[2] y, stack u32[2] z) -> stack u32[2] {
    
    reg u32 aux;

    aux = x[0];
    aux ^= y[0];
    z[0] = aux;

    aux = x[1];
    aux ^= y[1];
    z[1] = aux;

    return z;
}


inline
fn w_to_temp(stack u32[2] temp, stack u32[160] w, reg u64 pos_w) -> stack u32[2]{

    reg u32 aux0, aux1;

    /* Player 0 */

    aux0 = w[(int)pos_w - 6];
    aux1 = w[(int)pos_w - 16];

    aux0 ^= aux1;

    aux1 = w[(int)pos_w - 28];

    aux0 ^= aux1;

    aux1 = w[(int)pos_w - 32];

    aux0 ^= aux1;

    temp[0] = aux0;


    /* Player 1 */

    aux0 = w[(int)pos_w - 5];
    aux1 = w[(int)pos_w - 15];

    aux0 ^= aux1;

    aux1 = w[(int)pos_w - 27];

    aux0 ^= aux1;

    aux1 = w[(int)pos_w - 31];

    aux0 ^= aux1;

    temp[1] = aux0;

    return temp;
}


inline
fn mpc_LEFTROTATE_w(stack u32[2] x, stack u32[160] w, reg u64 pos_w) -> stack u32[160] {
    
    reg u32 storage_u32, x_0;
    reg u64 n, pos_aux;

    /* Player 0 */

    pos_aux = pos_w;
    storage_u32 = x[0];
    storage_u32 <<= 1;

    x_0 = x[0];
    x_0 >>= 31;
    
    storage_u32 |= x_0;

    w[(int)pos_aux] = storage_u32;


    /* Player 1 */

    pos_aux += 1;
    storage_u32 = x[1];
    storage_u32 <<= 1;
    

    
    x_0 = x[1];
    x_0 >>= 31;
    
    storage_u32 |= x_0;

    w[(int)pos_aux] = storage_u32;


    return w;
}

inline
fn mpc_LEFTROTATE_5(stack u32[2] a, stack u32[2] temp) -> stack u32[2] {
    
    reg u32 storage_u32, storage_aux; 
    
    storage_u32 = a[0];
    storage_aux = storage_u32;
    storage_u32 = storage_u32 << 5;
    storage_aux = storage_aux >> 27;
    storage_u32 |= storage_aux;
    temp[0] = storage_u32;

    storage_u32 = a[1];
    storage_aux = storage_u32;
    storage_u32 = storage_u32 << 5;
    storage_aux = storage_aux >> 27;
    storage_u32 |= storage_aux;
    temp[1] = storage_u32;

    return temp;
}

inline
fn mpc_LEFTROTATE_30(stack u32[2] a, stack u32[2] temp) -> stack u32[2] {
    
    reg u32 storage_u32, storage_aux; 
    
    storage_u32 = a[0];
    storage_aux = a[0];
    storage_u32 = storage_u32 << 30;
    storage_aux = storage_aux >> 2;
    storage_u32 |= storage_aux;
    temp[0] = storage_u32;

    storage_u32 = a[1];
    storage_aux = a[1];
    storage_u32 = storage_u32 << 30;
    storage_aux = storage_aux >> 2;
    storage_u32 |= storage_aux;
    temp[1] = storage_u32;


    return temp;
}

inline
fn mpc_ADD_verify(stack u32[2] x, stack u32[2] y, stack u32[2] z, reg u64 randomness1, reg u64 randomness2, reg u64 zs, reg u64 randCount, reg u64 countY, reg u64 success) -> stack u32[2], reg u64, reg u64 {

    stack u32[2] r, a, b;
    reg u32 t, t0, t1, tz, ta, tb, tr;

    reg u64 j, bit_idx, idx0, idx1;
    reg u64 temp_views, temp, player, temp_z;

    reg u8 t8;
    inline int debug;

    stack u32[2] x_aux, y_aux;

    inline int i, bit_idx;

    t = x[0];
    x_aux[0] = t;
    t = x[1];
    x_aux[1] = t;

    t = y[0];
    y_aux[0] = t;
    t = y[1];
    y_aux[1] = t;


    r[0] = (u32)[randomness1 + (int)randCount];
    
    r[1] = (u32)[randomness2 + (int)randCount];
    
    randCount += 4; 

    temp_z = 96;
    temp_z += countY;

    bit_idx = 1;
    for i=0 to 31{

        /* Player 0 */

        t = x[0];
        t1 = (u32)[zs + (int)temp_z];
        t ^= t1;
        t = GETBIT_u32_inline(t,i); 
        a[0] = t;

        t = y[0];
        t ^= t1;
        t = GETBIT_u32_inline(t,i);
        b[0] = t;

        /* Player 1 */

        temp_z += 1544;

        t = x[1];
        t1 = (u32)[zs + (int)temp_z];
        t ^= t1;
        t = GETBIT_u32_inline(t,i);
        a[1] = t;

        t = y[1];
        t ^= t1;
        t = GETBIT_u32_inline(t,i);
        b[1] = t;

        temp_z -= 1544;


        /* Player 0 */

        t = a[0];
        t &= b[1];

        ta = a[1];
        tb = b[0];
        ta &= tb;
        t ^= ta;

        ta = a[0];
        tb = b[0];
        ta &= tb;
        t ^= ta;

        tr = r[1];
        tr = GETBIT_u32_inline(tr,i);
        t ^= tr;


        tz = (u32)[zs + (int)temp_z];
        tz = GETBIT_u32_inline(tz,i);
        t ^= tz;

        tr = r[0];
        tr = GETBIT_u32_inline(tr,i);
        t ^= tr;

        tz = (u32)[zs + (int)temp_z];
        tz = GETBIT_u32_inline(tz,bit_idx);


        if(tz != t){
            [success + 0] = 1;
        }

        
        bit_idx += 1;
    }
    
    tz = (u32)[zs + (int)temp_z];
    t0 = x_aux[0];
    t0 ^= y_aux[0];
    t0 ^= tz;
    z[0] = t0;

    temp_z += 1544;
    
    tz = (u32)[zs + (int)temp_z];
    t0 = x_aux[1];
    t0 ^= y_aux[1];
    t0 ^= tz;
    z[1] = t0;

    countY += 4;

    return z, randCount, countY;
}

inline
fn mpc_AND_verify(stack u32[2] x, stack u32[2] y, stack u32[2] z, reg u64 randomness1, reg u64 randomness2, reg u64 zs, reg u64 randCount, reg u64 countY, reg u64 success) -> stack u32[2], reg u64, reg u64 {

    stack u32[2] r;
    reg u64 temp_z;
    reg u32 t0, t1;


    r[0] = (u32)[randomness1 + (int)randCount];
    
    r[1] = (u32)[randomness2 + (int)randCount];
    
    randCount += 4; 

    t0 = x[0];
    t0 &= y[1];

    t1 = x[1];
    t1 &= y[0];
    t0 ^= t1;

    t1 = x[0];
    t1 &= y[0];
    t0 ^= t1;

    t0 ^= r[0];
    t0 ^= r[1];

    temp_z = 96;
    temp_z += countY;

    t1 = (u32)[zs + (int)temp_z];
    
    if(t1 != t0) {
        [success + 0] = 1;
    }

    z[0] = t0;

    temp_z += 1544;
    t1 = (u32)[zs + temp_z]; 
    z[1] = t1;

    countY += 4;

    return z, randCount, countY;
}

inline
fn mpc_MAJ_verify(stack u32[2] a, stack u32[2] b, stack u32[2] c, stack u32[2] z, reg u64 randomness1, reg u64 randomness2, reg u64 zs, reg u64 randCount, reg u64 countY, reg u64 success) -> stack u32[2], reg u64, reg u64 {
    
    stack u32[2] t0, t1;
    reg u32 t;
    reg u64 temp_views;

    t0 = mpc_xor2(a, b, t0);
    t1 = mpc_xor2(a, c, t1);

    z, randCount, countY = mpc_AND_verify(t0, t1, z, randomness1, randomness2, zs, randCount, countY,  success);

    z = mpc_xor2(z, a, z);

    return z, randCount, countY;
}

/*************
*            *
*  MPC Sha1  *
*            *
*************/

export
fn verify(reg u64 as, reg u64 z, reg u64 es, reg u64 r1, reg u64 r2, reg u64 success) {


    reg u64 temp_z, temp_w, temp_a;
    reg u64 randCount, countY;
    reg u64 storage_u64;
    reg u32 storage_u32;
    reg u8 storage_u8;

    stack u32[160] w;                           // u32 W[80][2];
    

    reg u64 i, j, n;
    stack u32[2] temp, temp1;                   // uint32_t temp[2]; 
    stack u32[2] t0,t1,t2;                      // uint32_t t0[2];

    stack u32[2] a, b, c, d, e, f, w_aux;
    stack u32 k;

    stack u32[5] hA;
    stack u32[2] hHa;

    reg u32 t32, mem;
    reg u64 t64, player;

    hA[0] = 0x67452301;
    hA[1] = 0xEFCDAB89;
    hA[2] = 0x98BADCFE;
    hA[3] = 0x10325476;
    hA[4] = 0xC3D2E1F0;

    // Compare Player 0's transcript

    player = (u64)[es + 0];

    temp_z = 1556;
    temp_a = 32 * player;

    i = 0;
    while(i < 20){
        t32 = (u32)[z + (int)temp_z];
        mem = (u32)[as + (int)temp_a];

        if(mem != t32){
            (u64)[success + 0] = 1; 
        }

        temp_z += 4;
        temp_a += 4;
        i += 4;
    }

    // Compare Player 1's transcript

    player += 1;
    if(player == 3){
        player = 0;
    }

    temp_z = 3100;
    temp_a = 32 * player;
    
    i = 0;
    while(i < 20){
        t32 = (u32)[z + (int)temp_z];
        mem = (u32)[as + (int)temp_a];

        if(mem != t32){
            (u64)[success + 0] = 1; 
        }

        temp_z += 4;
        temp_a += 4;
        i += 4;
    }
    

    temp_z = 32;
    temp_w = 0;
    i = 0;
    while(i < 16){
        t32 = (u32)[z + (int)temp_z];
        t32 = #BSWAP_32(t32);
        w[(int)temp_w] = t32;

        temp_z += 4;
        temp_w += 2;
        i += 1;
    }

    temp_z = 1576;
    temp_w = 1;
    i = 0;
    while(i < 16){
        t32 = (u32)[z + (int)temp_z];

        t32 = #BSWAP_32(t32);
        
        w[(int)temp_w] = t32;

        temp_z += 4;
        temp_w += 2;
        i += 1;
    }

    i = 32; // R16 começa na posição 32 (16 * 2)
    while(i < 160){

        temp = w_to_temp(temp, w, i);

        w = mpc_LEFTROTATE_w(temp, w, i);

        i += 2;
    }
    
    // uint32_t a[2] = { hA[0],hA[0] };
    
    storage_u32 = hA[0];
    a[0] = storage_u32;
    a[1] = storage_u32;


    // uint32_t b[2] = { hA[1],hA[1] };

    storage_u32 = hA[1];
    b[0] = storage_u32;
    b[1] = storage_u32;


    // uint32_t c[2] = { hA[2],hA[2] };

    storage_u32 = hA[2];
    c[0] = storage_u32;
    c[1] = storage_u32;


    // uint32_t d[2] = { hA[3],hA[3] };

    storage_u32 = hA[3];
    d[0] = storage_u32;
    d[1] = storage_u32;


    // uint32_t e[2] = { hA[4],hA[4] };

    storage_u32 = hA[4];
    e[0] = storage_u32;
    e[1] = storage_u32;


    randCount = 0;
    countY = 0; 
    
    j = 0;
    while(j < 80){
        
        if(j <= 19){

            f = mpc_xor2(c,d,f);
            
            f, randCount, countY = mpc_AND_verify(b, f, f, r1, r2, z, randCount, countY, success);

            f = mpc_xor2(d,f,f);

            k = 0x5A827999;
        }
        else{
            if( j <= 39) {

                f = mpc_xor2(b,c,f);

                f = mpc_xor2(d,f,f);

                k = 0x6ED9EBA1;
            }
            else {
                
                if( j <= 59) {

                    f, randCount, countY = mpc_MAJ_verify(b,c,d,f, r1, r2, z, randCount, countY, success);

                    k = 0x8F1BBCDC;
                }
                else {
                    f = mpc_xor2(b,c,f);

                    f = mpc_xor2(d,f,f);

                    k = 0xCA62C1D6;
                }       
            }
        }
        
        temp = mpc_LEFTROTATE_5(a,temp);
        
        temp, randCount, countY = mpc_ADD_verify(f, temp, temp, r1, r2, z, randCount, countY, success);
        
        temp, randCount, countY = mpc_ADD_verify(e, temp, temp, r1, r2, z, randCount, countY, success);

        temp1[0] = k;
        temp1[1] = k;

        temp, randCount, countY = mpc_ADD_verify(temp, temp1, temp, r1, r2, z, randCount, countY, success);


        n = j * 2;
        storage_u32 = w[(int)n];
        w_aux[0] = storage_u32;
        n += 1;
        storage_u32 = w[(int)n];
        w_aux[1] = storage_u32;
        n += 1;


       temp, randCount, countY = mpc_ADD_verify(w_aux, temp, temp, r1, r2, z, randCount, countY, success);
        
        
        storage_u32 = d[0];
        e[0] = storage_u32;

        storage_u32 = d[1];
        e[1] = storage_u32;


        storage_u32 = c[0];
        d[0] = storage_u32;

        storage_u32 = c[1];
        d[1] = storage_u32;

        
        c = mpc_LEFTROTATE_30(b, c);
            

        storage_u32 = a[0];
        b[0] = storage_u32;

        storage_u32 = a[1];
        b[1] = storage_u32;


        storage_u32 = temp[0];
        a[0] = storage_u32;

        storage_u32 = temp[1];
        a[1] = storage_u32;
        
        j += 1;
    }
    
    storage_u32 = hA[0];
    hHa[0] = storage_u32;
    hHa[1] = storage_u32;

    temp, randCount, countY = mpc_ADD_verify(hHa, a, hHa, r1, r2, z, randCount, countY, success);

    storage_u32 = hA[1];
    hHa[0] = storage_u32;
    hHa[1] = storage_u32;

    temp, randCount, countY = mpc_ADD_verify(hHa, b, hHa, r1, r2, z, randCount, countY, success);

    storage_u32 = hA[2];
    hHa[0] = storage_u32;
    hHa[1] = storage_u32;

    temp, randCount, countY = mpc_ADD_verify(hHa, c, hHa, r1, r2, z, randCount, countY, success);

    storage_u32 = hA[3];
    hHa[0] = storage_u32;
    hHa[1] = storage_u32;

    temp, randCount, countY = mpc_ADD_verify(hHa, d, hHa, r1, r2, z, randCount, countY, success);

    storage_u32 = hA[4];
    hHa[0] = storage_u32;
    hHa[1] = storage_u32;

    temp, randCount, countY = mpc_ADD_verify(hHa, e, hHa, r1, r2, z, randCount, countY, success);
}













