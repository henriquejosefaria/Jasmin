inline
fn GETBIT(stack u32[3] aux, reg u64 bit_idx, reg u32 base_idx) -> reg u32 {

	reg u32 selectedBit;

	selectedBit = aux[(int)base_idx];
	selectedBit >>= bit_idx; 
	selectedBit &= 0x00000001;

	return selectedBit;	
}

inline
fn GETBIT_u32(reg u32 x, reg u64 bit_idx, reg u32 t) -> reg u32 {

	t = x;
	t = t >> bit_idx;
	t &= 0x00000001; 
	
	return t;	
}

inline
fn getBits(stack u32[3] array_r, stack u32[3] array_c, reg u64 i, reg u64 idx0, reg u64 idx1) -> reg u32, reg u32, reg u32 {

	reg u32 t0, t1, t2;
	reg u32 word0, word1, word2;

	t0 = 0;
	t1 = 0;
	t2 = 0;

	word0 = array_r[(int)idx0];
	t0 = GETBIT_u32(word0, i, t0);


	word1 = array_c[(int)idx1];
	t1 = GETBIT_u32(word1, i, t1);


	word2 = array_r[(int)idx1];
	t2 = GETBIT_u32(word2, i, t2);

	return t0, t1, t2;
}

inline
fn SETBIT_u32(stack u32[3] x, reg u64 bit_idx, reg u32 bit, reg u64 idx) -> reg u32[3] {

	reg u32 a;
	reg u32 bit_aux;
	reg u64 aux;

	aux = bit_idx;

	bit_aux = 1;
	bit_aux &= bit;

	a = 1;

	while(aux > 0){
		a <<= 1;
		aux -= 1;
	}
	
	if (bit_aux == 1){
		x[(int)idx] |= a;
	} else{
		a ^= 0xFFFFFFFF;
		x[(int)idx] &= a; 
	}
	
	return x;
}

inline
fn mpc_xor_k(stack u32 k, stack u32[3] y, stack u32[3] z) -> stack u32[3] {

	reg u32 y_aux;

	y_aux = y[0];
	z[0] = k;
	z[0] ^= y_aux;

	y_aux = y[1];
	z[1] = k;
	z[1] ^= y_aux;

	y_aux = y[2];
	z[2] = k;
	z[2] ^= y_aux;

	return z;
}

inline
fn mpc_xor(stack u32[3] x, stack u32[3] y, stack u32[3] z) -> stack u32[3] {
	
	reg u32 x_aux, y_aux;
	
	x_aux = x[0];
	y_aux = y[0];
	z[0] = x_aux;
	z[0] ^= y_aux;

	x_aux = x[1];
	y_aux = y[1];
	z[1] = x_aux;
	z[1] ^= y_aux;

	x_aux = x[2];
	y_aux = y[2];
	z[2] = x_aux;
	z[2] ^= y_aux;

	return z;
}

inline
fn mpc_xor_three(stack u32[3] x, stack u32[3] y, stack u32 k,  reg u64 i) -> stack u32[3] {
	
	reg u32 aux_x, aux_y;

	aux_x = x[(int)i];
	aux_y = y[(int)i];

	aux_x ^= aux_y;
	aux_x ^= k;

	x[(int)i] = aux_x;
	
	return x;
}

inline
fn mpc_words_k(stack u32[3] x, stack u32[3] y, stack u32 k, reg u64 j) -> reg u32, reg u32 {


	reg u32 a, b, c;
	reg u32 word_a, word_b;

	a = x[(int)j];
	b = y[(int)j];
	c = k;

	word_a = a ^ b;
	word_b = c ^ b;

	return word_a, word_b;
}

inline
fn mpc_ADD_K(stack u32[3] x, stack u32 k, reg u64 randomness, reg u64 randCount, reg u64 views, reg u64 countY, inline int mpcRounds) -> reg u32[3], reg u64, reg u64, reg u64 {

	stack u32[3] c, r, aux, aux2;
	reg u64 bit_idx, idx0, idx1, player;

	inline u32 xor_aux;

	stack u32[3] a, b;
	reg u64 i;
	reg u64 j;
	reg u32 t, t0, t1, t2, word_a, word_b;

	reg u64 pos_rand, pos_views, idx;

	c[0] = 0;
	c[1] = 0;
	c[2] = 0;

	i = 0;

	while(i < 3){

		pos_rand = i;
		pos_rand *= 4;
		pos_rand *= mpcRounds;
		pos_rand += randCount;

		r[(int)i] = (u32)[randomness + (int)pos_rand];

		i += 1;
	}

	randCount += 1;

	i  =0;
	
	while(i < 31){

		bit_idx = i;
		bit_idx += 1;

		j = 0;

		while(j < 3){

			word_a, word_b = mpc_words_k(x, c, k, j);

			t = GETBIT_u32(word_a,i,t);
			a[(int)j] = t;

			t = GETBIT_u32(word_b,i,t);
			b[(int)j] = t;

			j += 1;
		}

		/* Set first word */

		idx0 = 1;
		idx1 = 0;

		t0, t1, t2 = getBits(r, c, i, idx0, idx1);
		
		t = a[0];
		t &= b[1];
		t ^= t0;

		t0 = a[1];
		t0 &= b[0];
		t ^= t0;

		t0 = a[0];
		t0 &= b[0];
		t ^= t0;

		t ^= t1;
		t ^= t2;

		player = 0;

		c = SETBIT_u32(c, bit_idx, t, player);



		/* Set second word */

		idx0 = 2;
		idx1 = 1;

		t0, t1, t2 = getBits(r, c, i, idx0, idx1);
		
		t = a[1];
		t &= b[2];
		t ^= t0;

		t0 = a[2];
		t0 &= b[1];
		t ^= t0;

		t0 = a[1];
		t0 &= b[1];
		t ^= t0;

		t ^= t1;
		t ^= t2;

		player = 1;

		c = SETBIT_u32(c, bit_idx, t, player);
		


		/* Set third word */

		idx0 = 0;
		idx1 = 2;

		t0, t1, t2 = getBits(r, c, i, idx0, idx1);
		
		t = a[2];
		t &= b[0];
		t ^= t0;

		t0 = a[0];
		t0 &= b[2];
		t ^= t0;

		t0 = a[2];
		t0 &= b[2];
		t ^= t0;

		t ^= t1;
		t ^= t2;

		player = 2;

		c = SETBIT_u32(c, bit_idx, t, player);

		i += 1;
		
	}

	idx = 0;
	
	while(idx < 3){
		
		x = mpc_xor_three(x,c,k,idx);
		
		pos_views = idx;
		pos_views *= 365;
		pos_views *= mpcRounds;
		pos_views += 768;
		pos_views += countY;

		t = c[(int)idx];

		(u32)[views + pos_views] = t;

		idx += 1;

	}

	countY += 1;

	return x, randCount, countY, views;
}

export 
fn test(reg u64 views){

	stack u32[3] x;
	stack u32 k;
	reg u64 randomness, randCount, countY;
	inline int mpcRounds;

	mpcRounds = 128;
	randomness = 0;
	randCount = 0;
	countY = 0;

	x[0] = 0;
	x[1] = 0;
	x[2] = 0;

	x, randCount, countY, views = mpc_ADD_K(x, k, randomness, randCount, views, countY, mpcRounds);
}