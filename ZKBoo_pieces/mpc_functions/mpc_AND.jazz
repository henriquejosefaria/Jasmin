fn mpc_AND(reg u32[3] x, reg u32[3] y, reg u32[3] z, reg u64 randomness, reg u64 randCount, reg u64 views, reg u64 countY, reg u64 mpc_idx, reg u64 mpcRounds) -> reg u32[3], reg u64, reg u64, reg u64 {

	stack u32[3] r;
	reg u64 i, pos_randomness, pos_r, pos_views, temp_pos, temp;
	reg u32 temp0, temp1, temp2, z_aux;


	i = 0;

	while(i < 3){

		pos_randomness = i * 4;
		pos_randomness *= mpcRounds;
		pos_randomness += randCount;

		pos_r = i;

		r[(int)pos_r] = [randomness + (int)pos_randomness];

		i += 1;
	}

	randCount += 4;


	temp0 = x[0];
	temp0 &= y[1];

	temp1 = x[1];
	temp1 &= y[0];

	temp2 = x[0];
	temp2 &= y[0];
	
	temp0 ^= temp1;
	temp0 ^= temp2;

	temp1 = r[0];
	temp2 = r[1];

	temp0 ^= temp1;
	temp0 ^= temp2;

	z[u32 0] = temp0;


	temp0 = x[1];
	temp0 &= y[2];

	temp1 = x[2];
	temp1 &= y[1];

	temp2 = x[1];
	temp2 &= y[1];
	
	temp0 ^= temp1;
	temp0 ^= temp2;

	temp1 = r[1];
	temp2 = r[2];

	temp0 ^= temp1;
	temp0 ^= temp2;

	z[u32 1] = temp0;


	temp0 = x[2];
	temp0 &= y[0];

	temp1 = x[0];
	temp1 &= y[2];

	temp2 = x[2];
	temp2 &= y[2];
	
	temp0 ^= temp1;
	temp0 ^= temp2;

	temp1 = r[2];
	temp2 = r[0];

	temp0 ^= temp1;
	temp0 ^= temp2;

	z[2] = temp0;


	i = 0;
	

	temp_pos = mpc_idx * 370; // player's current view.y

	while(i < 3){

		pos_views = i;
		pos_views *= mpcRounds;			// which player info do we need (player * mpcRounds * view.y_size)
		pos_views *= 370;				
		pos_views += 6144;				// view.x of the 3 players times mpcRounds
		pos_views += temp_pos;			// player's current view.y 

		pos_views += countY;			// current pointer inside view.y

		/* Z => u32[3]; */

		(u32)[views + (int)pos_views] = z[(int)i];
		
		i += 1;
	}
	
	countY += 1;

	return z, randCount, countY, views;
}

export 
fn test(reg u64 views){

	reg u32[3] x, y, z;
	reg u64 randomness, randCount, countY;
	reg u64 mpc_idx, mpcRounds;

	mpcRounds = 128;
	randomness = 0;
	randCount = 0;
	countY = 0;
	mpc_idx = 0;

	z, randCount, countY, views = mpc_AND(x, y, z, randomness, randCount, views, countY, mpc_idx, mpcRounds);

}