inline
fn GETBIT_EXTENDED(stack u8[32] aux, stack u8 bit_idx) -> reg u8 {

	reg u8 selectedBit;
	reg u8 byte_idx;

	
	byte_idx =  bit_idx / 8;
	bit_idx = bit_idx - byte_idx * 8;

	selectedBit = aux[(int) byte_idx];
	selectedBit = selectedBit >> bit_idx; 
	selectedBit &= 0x01;

	selectedBit = 0;

	return  selectedBit;	
}

inline
fn ROTRIGHT_ep(reg u32 a, reg u8 b, reg u32 res) -> stack u32 {

    a = ((a >> b) | (a << (32 - b)));
    res ^= a;

    return res;
}

inline
fn EP0(reg u32 x, reg u32 res) -> reg u32{

    reg u32 aux, aux0, aux1, aux2;
    reg u8 b;

    aux = x;

    res = 0;
    b = 2;
    res = ROTRIGHT_ep(aux,b,res);

    b = 13;
    res = ROTRIGHT_ep(aux,b,res);

    b = 22;
    res = ROTRIGHT_ep(aux,b,res);

    return res;
}

inline
fn EP1(reg u32 x, reg u32 res) -> reg u32{

    reg u32 aux, aux0, aux1, aux2;
    reg u8 b;

    aux = x;

    res = 0;
    b = 6;
    res = ROTRIGHT_ep(aux,b,res);

    b = 11;
    res = ROTRIGHT_ep(aux,b,res);
    
    b = 25;
    res = ROTRIGHT_ep(aux,b,res);


    return res;
} 

inline
fn ROTRIGHT_sig(reg u32 a, reg u8 b, reg u32 aux) -> stack u32 {

    aux = ((a >> b) | (a << (32 - b)));
    return aux;
}

inline
fn SIG0(reg u32 x) -> reg u32 {

    reg u32 aux0, aux1, aux2;
    reg u8 b;


    b = 7;
    aux0 = ROTRIGHT_sig(x,b,aux0);

    b=18;
    aux1 = ROTRIGHT_sig(x,b,aux1);

    aux2 = x >> 3;

    x = aux0 ^ aux1 ^ aux2;

    return x;
}

inline
fn SIG1(reg u32 x) -> reg u32{
    reg u32 aux, aux0, aux1, aux2;
    reg u8 b;

    b = 17;
    aux0 = ROTRIGHT_sig(x,b,aux0);
    
    b = 19;
    aux1 = ROTRIGHT_sig(x,b,aux1);

    aux2 = (x >> 10); 

    x = aux0 ^ aux1 ^ aux2;

    return x;
}

inline
fn CH(stack u32 x, stack u32 y, stack u32 z) -> reg u32{
    
    reg u32 t0, t1;

    t0 = x;
    t0 &= y;

    t1 = x;
    t1 ^= 0xFFFFFFFF;
    t1 &= z;

    t0 ^= t1;

    return t0;
}

inline
fn MAJ(stack u32 x, stack u32 y, stack u32 z) -> reg u32{

    stack u32 t0, t1;

    t0 = x;
    t0 &= y;

    t1 = x;
    t1 &= z;
    t0 ^= t1;

    t1 = y;
    t1 &= z;
    t0 ^= t1;

    return t0;
}

inline
fn initializeK(stack u32[64] k) -> stack u32[64]{
    k[0] = 0x428a2f98;
    k[1] = 0x71374491;
    k[2] = 0xb5c0fbcf;
    k[3] = 0xe9b5dba5;
    k[4] = 0x3956c25b;
    k[5] = 0x59f111f1;
    k[6] = 0x923f82a4;
    k[7] = 0xab1c5ed5;
    k[8] = 0xd807aa98;
    k[9] = 0x12835b01;
    k[10] = 0x243185be;
    k[11] = 0x550c7dc3;
    k[12] = 0x72be5d74;
    k[13] = 0x80deb1fe;
    k[14] = 0x9bdc06a7;
    k[15] = 0xc19bf174;
    k[16] = 0xe49b69c1;
    k[17] = 0xefbe4786;
    k[18] = 0x0fc19dc6;
    k[19] = 0x240ca1cc;
    k[20] = 0x2de92c6f;
    k[21] = 0x4a7484aa;
    k[22] = 0x5cb0a9dc;
    k[23] = 0x76f988da;
    k[24] = 0x983e5152;
    k[25] = 0xa831c66d;
    k[26] = 0xb00327c8;
    k[27] = 0xbf597fc7;
    k[28] = 0xc6e00bf3;
    k[29] = 0xd5a79147;
    k[30] = 0x06ca6351;
    k[31] = 0x14292967;
    k[32] = 0x27b70a85;
    k[33] = 0x2e1b2138;
    k[34] = 0x4d2c6dfc;
    k[35] = 0x53380d13;
    k[36] = 0x650a7354;
    k[37] = 0x766a0abb;
    k[38] = 0x81c2c92e;
    k[39] = 0x92722c85;
    k[40] = 0xa2bfe8a1;
    k[41] = 0xa81a664b;
    k[42] = 0xc24b8b70;
    k[43] = 0xc76c51a3;
    k[44] = 0xd192e819;
    k[45] = 0xd6990624;
    k[46] = 0xf40e3585;
    k[47] = 0x106aa070;
    k[48] = 0x19a4c116;
    k[49] = 0x1e376c08;
    k[50] = 0x2748774c;
    k[51] = 0x34b0bcb5;
    k[52] = 0x391c0cb3;
    k[53] = 0x4ed8aa4a;
    k[54] = 0x5b9cca4f;
    k[55] = 0x682e6ff3;
    k[56] = 0x748f82ee;
    k[57] = 0x78a5636f;
    k[58] = 0x84c87814;
    k[59] = 0x8cc70208;
    k[60] = 0x90befffa;
    k[61] = 0xa4506ceb;
    k[62] = 0xbef9a3f7;
    k[63] = 0xc67178f2;

    return k;
}

inline
fn sha256_transform(stack u32[8] ctx_state, stack u32[16] ctx_data)
{
    reg u32 a, b, c, d, e, f, g, h, t1, t2, temp;

    stack u32[64] m;

    reg u32 sig0, sig1;

    reg u64 i, j;

    inline int idx;

    stack u32[64] k;
    k = initializeK(k);

    j = 0;
    i = 0;
    while(i < 16){

        m[(int)j] = (ctx_data[(int)j]);
        j += 1;
        i += 1;
    }

    while(i < 64){
        sig0 = m[(int)i - 15];
        sig1 = m[(int)i - 2];

        sig0 = SIG0(sig0);
        sig1 = SIG1(sig1);
        
        m[(int)i] = sig1;
        temp = m[(int)i - 7];
        m[(int)i] += temp;
        m[(int)i] += sig0;
        temp = m[(int)i - 16];
        m[(int)i] += temp;

        i += 1;
    } 

    a = ctx_state[0];
    b = ctx_state[1];
    c = ctx_state[2];
    d = ctx_state[3];
    e = ctx_state[4];
    f = ctx_state[5];
    g = ctx_state[6];
    h = ctx_state[7];
    
    i = 0;
    while(i < 64){

        sig0 = EP1(e,sig0);
        sig1 = CH(e,f,g);

        t1 = h;
        t1 += sig0;
        t1 += sig1;
        t1 += k[(int)i];
        t1 += m[(int)i];

        sig0 = EP0(a,sig0);
        sig1 = MAJ(a,b,c);

        t2 = sig0 + sig1;

        h = g;
        g = f;
        f = e;
        e = d;
        e += t1;
        d = c;
        c = b;
        b = a;
        a = t1;
        a += t2;

        i += 1;
    }

    ctx_state[0] += a;
    ctx_state[1] += b;
    ctx_state[2] += c;
    ctx_state[3] += d;
    ctx_state[4] += e;
    ctx_state[5] += f;
    ctx_state[6] += g;
    ctx_state[7] += h;
}

inline
fn sha256_init(stack u32[8] ctx_state, stack u32 ctx_datalen, stack u64 ctx_bitlen) 
{
    ctx_datalen = 0;
    ctx_bitlen = 0;
    ctx_state[0] = 0x6a09e667;
    ctx_state[1] = 0xbb67ae85;
    ctx_state[2] = 0x3c6ef372;
    ctx_state[3] = 0xa54ff53a;
    ctx_state[4] = 0x510e527f;
    ctx_state[5] = 0x9b05688c;
    ctx_state[6] = 0x1f83d9ab;
    ctx_state[7] = 0x5be0cd19;
}

inline
fn sha256_update5(stack u32[8] ctx_state, stack u32[16] ctx_data, stack u64 ctx_datalen, stack u64 ctx_bitlen, stack u32[8] data, inline int len) -> stack u64, stack u64
{
    reg u64 i;

    i = 0;
    while(i < len){

    	ctx_data[(int)ctx_datalen] = data[(int)i];
    	ctx_datalen += 1;

    	if(ctx_datalen == 16){
    		sha256_transform(ctx_state, ctx_data);
    		ctx_bitlen += 512;
    		ctx_datalen = 0;
    	}

    	i += 1;
    }

    return ctx_datalen, ctx_bitlen;
}

inline
fn sha256_update6(stack u32[8] ctx_state, stack u32[16] ctx_data, stack u64 ctx_datalen, stack u64 ctx_bitlen, reg u64 data, inline int len) -> stack u64, stack u64
{
    reg u64 i;

    i = 0;
    while(i < len){

        ctx_data[(int)ctx_datalen] = (u32)[data + i];
        ctx_datalen += 1;

        if(ctx_datalen == 16){
            sha256_transform(ctx_state, ctx_data);
            ctx_bitlen += 512;
            ctx_datalen = 0;
        }

        i += 1;
    }

    return ctx_datalen, ctx_bitlen;
}

inline
fn sha256_update7(stack u32[8] ctx_state, stack u32[16] ctx_data, stack u64 ctx_datalen, stack u64 ctx_bitlen, reg u64 data, inline int len) -> stack u64, stack u64
{
    reg u64 i;

    i = 0;
    while(i < len){

        ctx_data[(int)ctx_datalen] = (u32)[data + 384 + i];
        ctx_datalen += 1;

        if(ctx_datalen == 16){
            sha256_transform(ctx_state, ctx_data);
            ctx_bitlen += 512;
            ctx_datalen = 0;
        }

        i += 1;
    }

    return ctx_datalen, ctx_bitlen;
}

inline
fn sha256_final2(stack u32[8] ctx_state, stack u32[16] ctx_data, stack u64 ctx_datalen, stack u64 ctx_bitlen, stack u32[8] hash) -> stack u32[8]
{
    reg u64 i, temp;
    reg u64 j;
    reg u32 t;

    i = ctx_datalen;

    // Pad whatever data is left in the buffer.
    if (ctx_datalen < 14) {
        ctx_data[(int)i] = 0x80000000;
        i += 1;
        while (i < 14){
            ctx_data[(int)i] = 0x00000000;
            i += 1;
        }
    }
    else {
        ctx_data[(int)i] = 0x80000000;
        i += 1;
        while (i < 16){
            ctx_data[(int)i] = 0x00000000;
            i += 1;
        }
        sha256_transform(ctx_state, ctx_data);
        i = 0;
        while(i < 14){
        	ctx_data[(int)i] = 0x00000000;
        	i += 1;
        }
    }

    // Append to the padding the total message's length in bits and transform.

    ctx_bitlen += ctx_datalen * 8;

    temp = ctx_bitlen;
    temp += ctx_bitlen >> 8;
    temp += ctx_bitlen >> 16;
    temp += ctx_bitlen >> 24;
    temp += ctx_bitlen >> 32;
    temp += ctx_bitlen >> 40;
    temp += ctx_bitlen >> 48;
    temp += ctx_bitlen >> 56;

    ctx_data[u64 7] = temp;
    
    sha256_transform(ctx_state, ctx_data);

    // Since this implementation uses little endian byte ordering and SHA uses big endian,
    // reverse all the bytes when copying the final state to the output hash.

    i = 0;
    while(i < 8){

        t = ctx_state[(int)i];
    	hash[(int)i] = t;
        i += 1;

    }

    return hash;
}

inline
fn H3(stack u32[8] y, reg u64 a, inline int s, reg u8[128] es) -> reg u8[128] {


	stack u32[8] hash; // unsigned char hash[SHA256_DIGEST_LENGTH];
	
	stack u32[16] ctx_data;
	stack u64 ctx_datalen;
	stack u64 ctx_bitlen;
	stack u32[8] ctx_state;

	reg u64 i;
	stack u8 bitTracker;
	reg u8 b1, b2;



	sha256_init(ctx_state, ctx_datalen, ctx_bitlen);

	ctx_datalen, ctx_bitlen = sha256_update5(ctx_state, ctx_data, ctx_datalen, ctx_bitlen, y, 20);

	ctx_datalen, ctx_bitlen = sha256_update6(ctx_state, ctx_data, ctx_datalen, ctx_bitlen, a, 3072);

	ctx_datalen, ctx_bitlen = sha256_update7(ctx_state, ctx_data, ctx_datalen, ctx_bitlen, a, 3072);

	hash = sha256_final2(ctx_state, ctx_data, ctx_datalen, ctx_bitlen, hash);

	
	//Pick bits from hash
	i = 0;
	bitTracker = 0;
    /*
	while(i < s) {
		
		if(bitTracker >= 256) { //Generate new hash
			sha256_init(ctx_state, ctx_datalen, ctx_bitlen);
			ctx_datalen, ctx_bitlen = sha256_update5(ctx_state, ctx_data, ctx_datalen, ctx_bitlen, hash, 32);
			hash = sha256_final2(ctx_state, ctx_data, ctx_datalen, ctx_bitlen, hash);
			bitTracker = 0;
		}


		b1 = GETBIT_EXTENDED(hash, bitTracker);
		bitTracker += 1;
		b2 = GETBIT_EXTENDED(hash, bitTracker);

		if(b1 == 0) {
			if(b2 == 0) {
				es[(int)i] = 0;
				bitTracker += 1;
				i += 1;
			} else {
				es[(int)i] = 1;
				bitTracker += 1;
				i += 1;
			}
		} else {
			if(b2 == 0) {
				es[(int)i] = 2;
				bitTracker += 1;
				i += 1;
			} else {
				bitTracker += 1;
			}
		}
	}
	*/
	return es;
}


export 
fn test(reg u64 a){

    stack u32[8] y;
    inline int s;
    reg u8[128] es;

    s = 0;

    es = H3(y, a, s, es);
}