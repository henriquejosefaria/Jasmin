
inline
fn ROTRIGHT_ep(reg u32 a, reg u8 b, reg u32 res) -> stack u32 {

    a = ((a >> b) | (a << (32 - b)));
    res ^= a;

    return res;
}

inline
fn EP0(stack u8[4] x, reg u32 res) -> reg u32{

    reg u32 aux, aux0, aux1, aux2;
    reg u8 b;

    aux = x[u32 0];

    res = 0;
    b = 2;
    res = ROTRIGHT_ep(aux,b,res);

    b = 13;
    res = ROTRIGHT_ep(aux,b,res);

    b = 22;
    res = ROTRIGHT_ep(aux,b,res);

    return res;
}

inline
fn EP1(stack u8[4] x, reg u32 res) -> reg u32{

    reg u32 aux, aux0, aux1, aux2;
    reg u8 b;

    aux = x[u32 0];

    res = 0;
    b = 6;
    res = ROTRIGHT_ep(aux,b,res);

    b = 11;
    res = ROTRIGHT_ep(aux,b,res);
    
    b = 25;
    res = ROTRIGHT_ep(aux,b,res);


    return res;
} 

inline
fn ROTRIGHT_sig(reg u32 a, reg u8 b, reg u32 aux) -> stack u32 {

    aux = ((a >> b) | (a << (32 - b)));
    return aux;
}

inline
fn SIG0(reg u32 x) -> reg u32 {

    reg u32 aux0, aux1, aux2;
    reg u8 b;


    b = 7;
    aux0 = ROTRIGHT_sig(x,b,aux0);

    b=18;
    aux1 = ROTRIGHT_sig(x,b,aux1);

    aux2 = x >> 3;

    x = aux0 ^ aux1 ^ aux2;

    return x;
}

inline
fn SIG1(reg u32 x) -> reg u32{
    reg u32 aux, aux0, aux1, aux2;
    reg u8 b;

    b = 17;
    aux0 = ROTRIGHT_sig(x,b,aux0);
    
    b = 19;
    aux1 = ROTRIGHT_sig(x,b,aux1);

    aux2 = (x >> 10); 

    x = aux0 ^ aux1 ^ aux2;

    return x;
}

inline
fn CH(stack u8[4] x, stack u8[4] y, stack u8[4] z) -> reg u32{
    
    inline int i;
    reg u32 aux;

    aux = (x[u32 0] & y[u32 0]) ^((x[u32 0] ^ 0xFF) & z[u32 0]);

    return aux;
}

inline
fn MAJ(stack u8[4] x, stack u8[4] y, stack u8[4] z) -> reg u32{
    inline int i;
    stack u32 aux;

    aux = (x[u32 i] & y[u32 i]) ^ (x[u32 i] & z[u32 i]) ^ (y[u32 i] & z[u32 i]);

    return aux;
}

inline
fn initializeK(stack u32[64] k) -> stack u32[64]{
    k[0] = 0x428a2f98;
    k[1] = 0x71374491;
    k[2] = 0xb5c0fbcf;
    k[3] = 0xe9b5dba5;
    k[4] = 0x3956c25b;
    k[5] = 0x59f111f1;
    k[6] = 0x923f82a4;
    k[7] = 0xab1c5ed5;
    k[8] = 0xd807aa98;
    k[9] = 0x12835b01;
    k[10] = 0x243185be;
    k[11] = 0x550c7dc3;
    k[12] = 0x72be5d74;
    k[13] = 0x80deb1fe;
    k[14] = 0x9bdc06a7;
    k[15] = 0xc19bf174;
    k[16] = 0xe49b69c1;
    k[17] = 0xefbe4786;
    k[18] = 0x0fc19dc6;
    k[19] = 0x240ca1cc;
    k[20] = 0x2de92c6f;
    k[21] = 0x4a7484aa;
    k[22] = 0x5cb0a9dc;
    k[23] = 0x76f988da;
    k[24] = 0x983e5152;
    k[25] = 0xa831c66d;
    k[26] = 0xb00327c8;
    k[27] = 0xbf597fc7;
    k[28] = 0xc6e00bf3;
    k[29] = 0xd5a79147;
    k[30] = 0x06ca6351;
    k[31] = 0x14292967;
    k[32] = 0x27b70a85;
    k[33] = 0x2e1b2138;
    k[34] = 0x4d2c6dfc;
    k[35] = 0x53380d13;
    k[36] = 0x650a7354;
    k[37] = 0x766a0abb;
    k[38] = 0x81c2c92e;
    k[39] = 0x92722c85;
    k[40] = 0xa2bfe8a1;
    k[41] = 0xa81a664b;
    k[42] = 0xc24b8b70;
    k[43] = 0xc76c51a3;
    k[44] = 0xd192e819;
    k[45] = 0xd6990624;
    k[46] = 0xf40e3585;
    k[47] = 0x106aa070;
    k[48] = 0x19a4c116;
    k[49] = 0x1e376c08;
    k[50] = 0x2748774c;
    k[51] = 0x34b0bcb5;
    k[52] = 0x391c0cb3;
    k[53] = 0x4ed8aa4a;
    k[54] = 0x5b9cca4f;
    k[55] = 0x682e6ff3;
    k[56] = 0x748f82ee;
    k[57] = 0x78a5636f;
    k[58] = 0x84c87814;
    k[59] = 0x8cc70208;
    k[60] = 0x90befffa;
    k[61] = 0xa4506ceb;
    k[62] = 0xbef9a3f7;
    k[63] = 0xc67178f2;

    return k;
}

inline
fn sha256_transform(stack u8[32] ctx_state, stack u8[64] ctx_data)
{
    stack u8[4] a, b, c, d, e, f, g, h, t1, t2;

    stack u8[256] m;

    reg u32 sig0, sig1;

    inline int i;

    stack u32[64] k;
    k = initializeK(k);

    
    i=0;

    
    for i=0 to 64{

        m[i] = (ctx_data[i]);
        m[i + 1] = (ctx_data[i + 1]);
        m[i + 2] = (ctx_data[i + 2]);
        m[i + 3] = (ctx_data[i + 3]);

    }

    for i=0 to 64{
        sig0 = m[u32 i - 15];
        sig1 = m[u32 i - 2];

        sig0 = SIG0(sig0);
        sig1 = SIG1(sig1);
        
        m[i] = sig1 + m[i - 7] + sig0 + m[i - 16];

    } 

    for i=0 to 4{
        a[i] = ctx_state[i];
        b[i] = ctx_state[4 + i];
        c[i] = ctx_state[8 + i];
        d[i] = ctx_state[12 + i];
        e[i] = ctx_state[16 + i];
        f[i] = ctx_state[20 + i];
        g[i] = ctx_state[24 + i];
        h[i] = ctx_state[28 + i];
    }
    

    for i=0 to 64{

        sig0 = EP1(e,sig0);
        sig1 = CH(e,f,g);

        t1[u32 0] = h[u32 0] + sig0 + sig1 + k[i] + m[u32 i];

        sig0 = EP0(a,sig0);
        sig1 = MAJ(a,b,c);

        t2[u32 0] = sig0 + sig1;
        h = g;
        g = f;
        f = e;
        e[u32 0] = d[u32 0] + t1[u32 0];
        d = c;
        c = b;
        b = a;
        a[u32 0] = t1[u32 0] + t2[u32 0];

    }

    for i=0 to 4{

        ctx_state[i] += a[i];
        ctx_state[4 + i] += b[i];
        ctx_state[8 + i] += c[i];
        ctx_state[12 + i] += d[i];
        ctx_state[16 + i] += e[i];
        ctx_state[20 + i] += f[i];
        ctx_state[24 + i] += g[i];
        ctx_state[28 + i] += h[i];

    }
}

inline
fn sha256_update1(stack u8[32] ctx_state, stack u32 ctx_datalen, stack u64 ctx_bitlen, stack u8[16] data, inline int len) -> stack u32
{
    reg u64 i;
    stack u8[64] ctx_data;

    i = 0;

    while(i < len){

    	ctx_data[(int)ctx_datalen] = data[(int)i];
    	ctx_datalen += 1;

    	if(ctx_datalen == 64){
    		sha256_transform(ctx_state, ctx_data);
    		ctx_bitlen += 512;
    		ctx_datalen = 0;
    	}

    	i += 1;
    }

    return ctx_datalen;
}


export 
fn test(){

    stack u8[32] ctx_state;
    stack u32 ctx_datalen;
    stack u64 ctx_bitlen;
    stack u8[16] data;
    inline int len;

    len = 0;

    ctx_datalen = sha256_update1(ctx_state, ctx_datalen, ctx_bitlen, data, len);
}