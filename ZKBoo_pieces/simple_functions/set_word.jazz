inline
fn set_word(reg u64 rs, reg u64 player0, reg u64 player1, stack u64 mpcRounds, reg u64 i, reg u64 pos, reg u64 zs) {

	reg u64 word, aux_word;
	reg u64 mem_pos;


	// We grab the first half of the u64 if pos == 0 else we grab the second half
	

	mem_pos = player0 * mpcRounds;
	mem_pos = (mem_pos + i);
	mem_pos = mem_pos >> 1;        // Divide by 2

	if(pos == 0){
		word = [rs + mem_pos];
		word &= 0xffffffff00000000;
	} else {
		word = [rs + mem_pos];
		word <<= 32;
	}



	mem_pos = player1 * mpcRounds;
	mem_pos = mem_pos + i;
	mem_pos = mem_pos >> 1;        // Divide by 2

	if(pos == 0){
		aux_word = [rs + mem_pos];
		aux_word >>= 32;
	} else {
		aux_word = [rs + mem_pos];
		aux_word &= 0x00000000ffffffff;
	}

	word += aux_word;

	mem_pos = i * 391;
	mem_pos += 390;

	[zs + mem_pos] = word;
}



export 
fn test(reg u64 rs, reg u64 zs){

	reg u64 player0, player1;
	reg u64 mpcRounds;
	stack u64 i;
	reg u64 pos;

	i = 0;
	player0 = 0;
	player1 = 1;
	mpcRounds = 128;

	set_word(rs, player0, player1, mpcRounds, i, pos, zs);

}