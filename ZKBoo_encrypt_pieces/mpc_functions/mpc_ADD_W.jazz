
inline
fn GETBIT_u32(reg u32 x, reg u64 bit_idx, reg u32 t) -> reg u32 {

	reg u32 x_aux;

	x_aux = x;
	x_aux = x_aux >> bit_idx;
	x_aux &= 0x01; 
	
	return x_aux;	
}

inline
fn getBits(stack u32[3] array_r, stack u32[3] array_c, reg u64 i, reg u64 idx0, reg u64 idx1) -> reg u32, reg u32, reg u32 {

	reg u32 word0, word1, word2;

	word0 = array_r[(int)idx0];
	word1 = array_c[(int)idx1];
	word2 = array_r[(int)idx1];


	word0 = GETBIT_u32(word0, i, word0);
	word1 = GETBIT_u32(word1, i, word1);
	word2 = GETBIT_u32(word2, i, word2);

	return word0, word1, word2;
}

inline
fn SETBIT_u32(stack u32[3] x, reg u64 bit_idx, reg u32 bit, reg u64 idx) -> reg u32[3] {

	reg u32 a;
	reg u32 bit_aux;
	reg u64 aux;

	aux = bit_idx;

	bit_aux = 1;
	bit_aux &= bit;

	a = 1;

	while(aux > 0){
		a <<= 1;
		aux -= 1;
	}
	
	if (bit_aux == 1){
		x[(int)idx] |= a;
	} else{
		a ^= 0xFFFFFFFF;
		x[(int)idx] &= a; 
	}
	
	return x;
}

inline
fn mpc_xor(stack u32[3] x, stack u32[3] y, stack u32[3] z) -> stack u32[3] {
	
	reg u32[3] z_aux;

	z_aux[0] = x[0];
	z_aux[0] ^= y[0];
	z_aux[1] = x[1];
	z_aux[1] ^= y[1];
	z_aux[2] = x[2];
	z_aux[2] ^= y[2];

	z[0] = z_aux[0];
	z[1] = z_aux[1];
	z[2] = z_aux[2];

	return z;
}

inline
fn mpc_xor_w(stack u32[240] w, stack u32[3] y, stack u32[3] z, stack u64 pos_w) -> reg u32[3] {
	
	reg u64 pos;
	reg u32[3] z_aux;

	pos = pos_w;
	z_aux[0] = w[(int)pos];
	z_aux[0] ^= y[0];

	pos += 80;
	z_aux[1] = w[(int)pos];
	z_aux[1] ^= y[1];

	pos += 80;
	z_aux[2] = w[(int)pos];
	z_aux[2] ^= y[2];

	z[0] = z_aux[0];
	z[1] = z_aux[1];
	z[2] = z_aux[2];

	return z;
}


inline
fn mpc_words_w(stack u32[240] x, stack u32[3] y, stack u32[3] z, stack u64 pos_w, reg u64 j) -> reg u32, reg u32 {


	reg u32 a, b, c;
	reg u32 word_a, word_b;
	reg u64 pos;

	pos = j * 80;
	pos += pos_w;

	a = x[(int)pos];
	b = y[(int)j];
	c = z[(int)j];

	word_a = a ^ b;
	word_b = c ^ b;

	return word_a, word_b;
}


inline
fn mpc_ADD_W(stack u32[240] w, stack u32[3] y, stack u32[3] z, reg u64 randomness, stack u64 randCount, reg u64 views, stack u64 countY, stack u64 pos_w, stack u64 mpc_idx, stack u64 mpcRounds) -> stack u32[3], stack u64, stack u64, reg u64 {
	
	stack u32[3] c, r, aux, aux2;

	stack u32[3] a, b;

	reg u64 i, j, idx;

	reg u64 idx0, idx1, bit_idx, player;

	reg u64 temp_pos;

	reg u32 t, t0, t1, t2, word_a, word_b;

	reg u64 pos_views, pos_rand, pos_aux, temp_pos;

	c[0] = 0;
	c[1] = 0;
	c[2] = 0;

	idx = 0;

	while(idx < 3){

		pos_rand = idx;
		pos_rand *= 368;
		pos_rand *= mpcRounds;
		pos_rand += randCount;

		r[(int)idx] = (u32)[randomness + (int)pos_rand];

		idx += 1;
	}

	randCount += 1;

	i  = 0;
	
	while(i < 31){

		j = 0;

		while(j < 3){

			word_a, word_b = mpc_words_w(w, c, y, pos_w, j);

			t = GETBIT_u32(word_a,i,t);
			a[(int)j] = t;

			t = GETBIT_u32(word_b,i,t);
			b[(int)j] = t;

			j += 1;
		}
		

		/* Set first word */

		idx0 = 1;
		idx1 = 0;

		t0, t1, t2 = getBits(r, c, i, idx0, idx1);
		
		t = a[0];
		t &= b[1];
		t &= t0;

		t0 = a[1];
		t0 &= b[0];
		t ^= t0;

		t0 = a[0];
		t0 &= b[0];
		t ^= t0;

		t ^= t1;
		t ^= t2;

		player = 0;
		bit_idx = i;
		bit_idx += 1;
		c = SETBIT_u32(c, bit_idx, t, player);


		/* Set second word */

		idx0 = 2;
		idx1 = 1;

		t0, t1, t2 = getBits(r, c, i, idx0, idx1);
		

		t = a[1];
		t &= b[2];
		t &= t0;

		t0 = a[2];
		t0 &= b[1];
		t ^= t0;

		t0 = a[1];
		t0 &= b[1];
		t ^= t0;

		t ^= t1;
		t ^= t2;

		player = 1;
		bit_idx = i;
		bit_idx += 1;
		c = SETBIT_u32(c, bit_idx, t, player);
		

		/* Set third word */

		idx0 = 0;
		idx1 = 2;

		t0, t1, t2 = getBits(r, c, i, idx0, idx1);
		
		
		t = a[2];
		t &= b[0];
		t &= t0;

		t0 = a[0];
		t0 &= b[2];
		t ^= t0;

		t0 = a[2];
		t0 &= b[2];
		t ^= t0;

		t ^= t1;
		t ^= t2;

		player = 2;
		bit_idx = i;
		bit_idx += 1;
		c = SETBIT_u32(c, bit_idx, t, player);
		
		i += 1;	
	}
	

	idx = 0;
	temp_pos = mpc_idx * 370; // player's current view.y
	
	while(idx < 3){

		pos_aux = 80 * idx;
		pos_aux += pos_w;

		z[(int)i] = w[(int)pos_aux];
		z[(int)i] ^= y[(int)idx];
		z[(int)i] ^= c[(int)idx];
		
		pos_views = idx;
		pos_views *= 370;				// Current player views.y
		pos_views *= mpcRounds;
		pos_views += temp_pos;
		pos_views += 6144;				// view.x of the 3 players times mpcRound 

		pos_views += countY;			// current pointer inside view.y

		t = c[(int)idx];


		(u32)[views + pos_views] = t;

		idx += 1;

	}
	
	countY += 1;

	return y, randCount, countY, views;
}


export 
fn test(reg u64 views, reg u64 randomness){

	stack u32[3]  y;
	stack u32[240] w;
	stack u64 randCount, countY, pos_w;
	stack u64 mpc_idx, mpcRounds;

	mpcRounds = 128;
	mpc_idx = 0;
	randomness = 0;
	randCount = 0;
	countY = 0;
	pos_w = 0;

	y, randCount, countY, views = mpc_ADD_W(w, y, y, randomness, randCount, views, countY, pos_w, mpc_idx, mpcRounds);
}