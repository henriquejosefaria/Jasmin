inline
fn mpc_xor(stack u32[3] x, stack u32[3] y, stack u32[3] z) -> stack u32[3] {
	
	reg u32[3] aux;

	aux[0] = x[0];
	aux[0] ^= y[0];
	aux[1] = x[1];
	aux[1] ^= y[1];
	aux[2] = x[2];
	aux[2] ^= y[2];

	z[0] = aux[0];
	z[1] = aux[1];
	z[2] = aux[2];

	return z;
}


inline
fn mpc_AND(stack u32[3] x, stack u32[3] y, stack u32[3] z, reg u64 randomness, reg u64 randCount, reg u64 views, reg u64 countY, reg u64 mpc_idx, reg u64 mpcRounds) -> stack u32[3], reg u64, reg u64, reg u64 {

	stack u32[3] r;
	reg u64 i, pos_randomness, pos_r, pos_views, temp_pos, temp;
	reg u32 temp0, temp1, temp2, z_aux;


	i = 0;

	while(i < 3){

		pos_randomness = i * 4;
		pos_randomness *= mpcRounds;
		pos_randomness += randCount;

		pos_r = i;

		r[(int)pos_r] = (u32)[randomness + (int)pos_randomness];

		i += 1;
	}

	randCount += 1;


	temp0 = x[0];
	temp0 &= y[1];

	temp1 = x[1];
	temp1 &= y[0];

	temp2 = x[0];
	temp2 &= y[0];
	
	temp0 ^= temp1;
	temp0 ^= temp2;

	temp1 = r[0];
	temp2 = r[1];

	temp0 ^= temp1;
	temp0 ^= temp2;

	z[u32 0] = temp0;


	temp0 = x[1];
	temp0 &= y[2];

	temp1 = x[2];
	temp1 &= y[1];

	temp2 = x[1];
	temp2 &= y[1];
	
	temp0 ^= temp1;
	temp0 ^= temp2;

	temp1 = r[1];
	temp2 = r[2];

	temp0 ^= temp1;
	temp0 ^= temp2;

	z[u32 1] = temp0;


	temp0 = x[2];
	temp0 &= y[0];

	temp1 = x[0];
	temp1 &= y[2];

	temp2 = x[2];
	temp2 &= y[2];
	
	temp0 ^= temp1;
	temp0 ^= temp2;

	temp1 = r[2];
	temp2 = r[0];

	temp0 ^= temp1;
	temp0 ^= temp2;

	z[2] = temp0;


	i = 0;
	

	temp_pos = mpc_idx * 370; // player's current view.y

	while(i < 3){

		pos_views = i;
		pos_views *= mpcRounds;			// which player info do we need (player * mpcRounds * view.y_size)
		pos_views *= 370;				
		pos_views += 6144;				// view.x of the 3 players times mpcRounds
		pos_views += temp_pos;			// player's current view.y 

		pos_views += countY;			// current pointer inside view.y

		/* Z => u32[3]; */

		temp0 = z[(int)i];

		(u32)[views + (int)pos_views] = temp0;
		
		i += 1;
	}
	
	countY += 1;

	return z, randCount, countY, views;
}

inline
fn mpc_MAJ(stack u32[3] a, stack u32[3] b, stack u32[3] c, stack u32[3] z, reg u64 randomness, reg u64 randCount, reg u64 views, reg u64 countY, reg u64 mpc_idx, reg u64 mpcRounds) -> stack u32[3], reg u64, reg u64, reg u64 {
	
	stack u32[3] t0, t1;

	t0[0] = 0;
	t0[1] = 0;
	t0[2] = 0;

	t1[0] = 0;
	t1[1] = 0;
	t1[2] = 0;

	t0 = mpc_xor(a, b, t0);
	t1 = mpc_xor(a, c, t1);
	z, randCount, countY, views = mpc_AND(t0, t1, z, randomness, randCount, views, countY, mpc_idx, mpcRounds);
	z = mpc_xor(z, a, z);

	return z, randCount, countY, views;
}

export 
fn test(reg u64 views){

	stack u32[3] a, b, c, z;
	reg u64 randomness, randCount, countY;
	reg u64 mpc_idx, mpcRounds;

	mpcRounds = 128;
	randomness = 0;
	randCount = 0;
	countY = 0;
	mpc_idx = 0;

	a[0] = 0;
	a[1] = 0;
	a[2] = 0;

	b[0] = 0;
	b[1] = 0;
	b[2] = 0;

	c[0] = 0;
	c[1] = 0;
	c[2] = 0;

	z[0] = 0;
	z[1] = 0;
	z[2] = 0;

	z, randCount, countY, views = mpc_MAJ(a, b, c, z, randomness, randCount, views, countY, mpc_idx, mpcRounds);
}
