
fn GETBIT_EXTENDED(stack u8[32] aux, inline int bit_idx) -> inline u8 {

	inline u8 selectedBit;
	inline int byte_idx;

	byte_idx = bit_idx / 8;
	bit_idx = bit_idx - bit_idx / 8;

	selectedBit = aux[byte_idx];
	selectedBit >>= bit_idx; 
	selectedBit &= 0x01;

	return  selectedBit;	
}


/******************************
*                             *
*  SHA256 auxiliar functions  *
*                             *
******************************/


fn ROTLEFT(reg u32 a, inline int b) -> reg u32{
	reg u32 aux; 
	aux = ((a << b) | (a >> (32 - b)));
	return aux;
} 

fn ROTRIGHT(reg u32 a, inline int b) -> stack u32{
	stack u32 aux; 
	aux = ((a >> b) | (a << (32 - b)));
	return aux;
}


fn EP0(stack u8[4] x) -> reg u32{

	reg u32 aux, aux0, aux1, aux2;

	aux = x[u32 0];

	aux0 = ROTRIGHT(aux,2);
	aux1 = ROTRIGHT(aux,13);
	aux2 = ROTRIGHT(aux,22);

	aux0 ^= aux1 ^ aux2;

	return aux0;
}

fn EP1(stack u8[4] x) -> reg u32{

	reg u32 aux, aux0, aux1, aux2;

	aux = x[u32 0];

	aux0 = ROTRIGHT(aux,6);
	aux1 = ROTRIGHT(aux,11);
	aux2 = ROTRIGHT(aux,25);

	aux0 ^= aux1 ^ aux2;

	return aux0;
} 


fn SIG0(reg u32 x) -> reg u32 {

	reg u32 aux, aux0, aux1, aux2;

	aux0 = ROTRIGHT(x,7);
	aux1 = ROTRIGHT(x,18);
	aux2 = x >> 3;

	aux = aux0 ^ aux1 ^ aux2;

	return aux;
	
} 
fn SIG1(reg u32 x) -> reg u32{
	reg u32 aux, aux0, aux1;

	aux0 = ROTRIGHT(x,17);
	aux1 = ROTRIGHT(x,19);

	aux = aux0 ^ aux1 ^ (x >> 10);

	return aux;
}


fn CH(stack u8[4] x, stack u8[4] y, stack u8[4] z) -> reg u32{
	
	inline int i;
	reg u32 aux;

	aux = (x[u32 0] & y[u32 0]) ^((x[u32 0] ^ 0xFF) & z[u32 0]);

	return aux;
}

fn MAJ(stack u8[4] x, stack u8[4] y, stack u8[4] z) -> reg u32{
	inline int i;
	stack u32 aux;

	aux = (x[u32 i] & y[u32 i]) ^ (x[u32 i] & z[u32 i]) ^ (y[u32 i] & z[u32 i]);

	return aux;
}


fn initializeK(stack u32[64] k) -> stack u32[64]{
	k[0] = 0x428a2f98;
    k[1] = 0x71374491;
    k[2] = 0xb5c0fbcf;
    k[3] = 0xe9b5dba5;
    k[4] = 0x3956c25b;
    k[5] = 0x59f111f1;
    k[6] = 0x923f82a4;
    k[7] = 0xab1c5ed5;
    k[8] = 0xd807aa98;
    k[9] = 0x12835b01;
    k[10] = 0x243185be;
    k[11] = 0x550c7dc3;
    k[12] = 0x72be5d74;
    k[13] = 0x80deb1fe;
    k[14] = 0x9bdc06a7;
    k[15] = 0xc19bf174;
    k[16] = 0xe49b69c1;
    k[17] = 0xefbe4786;
    k[18] = 0x0fc19dc6;
    k[19] = 0x240ca1cc;
    k[20] = 0x2de92c6f;
    k[21] = 0x4a7484aa;
    k[22] = 0x5cb0a9dc;
    k[23] = 0x76f988da;
    k[24] = 0x983e5152;
    k[25] = 0xa831c66d;
    k[26] = 0xb00327c8;
    k[27] = 0xbf597fc7;
    k[28] = 0xc6e00bf3;
    k[29] = 0xd5a79147;
    k[30] = 0x06ca6351;
    k[31] = 0x14292967;
    k[32] = 0x27b70a85;
    k[33] = 0x2e1b2138;
    k[34] = 0x4d2c6dfc;
    k[35] = 0x53380d13;
    k[36] = 0x650a7354;
    k[37] = 0x766a0abb;
    k[38] = 0x81c2c92e;
    k[39] = 0x92722c85;
    k[40] = 0xa2bfe8a1;
    k[41] = 0xa81a664b;
    k[42] = 0xc24b8b70;
    k[43] = 0xc76c51a3;
    k[44] = 0xd192e819;
    k[45] = 0xd6990624;
    k[46] = 0xf40e3585;
    k[47] = 0x106aa070;
    k[48] = 0x19a4c116;
    k[49] = 0x1e376c08;
    k[50] = 0x2748774c;
    k[51] = 0x34b0bcb5;
    k[52] = 0x391c0cb3;
    k[53] = 0x4ed8aa4a;
    k[54] = 0x5b9cca4f;
    k[55] = 0x682e6ff3;
    k[56] = 0x748f82ee;
    k[57] = 0x78a5636f;
    k[58] = 0x84c87814;
    k[59] = 0x8cc70208;
    k[60] = 0x90befffa;
    k[61] = 0xa4506ceb;
    k[62] = 0xbef9a3f7;
    k[63] = 0xc67178f2;

    return k;
}

fn sha256_transform(stack u8[32] ctx_state, stack u8[64] ctx_data) -> stack u8[32]
{
    stack u8[4] a, b, c, d, e, f, g, h, t1, t2;

    stack u8[256] m;

    reg u32 sig0, sig1, aux0, aux1;

    inline int i, j;

    stack u32[64] k;
    k = initializeK(k);

    j=0;

    for i=0 to 16{

    	m[j] = (ctx_data[j]);
    	m[j + 1] = (ctx_data[j + 1]);
    	m[j + 2] = (ctx_data[j + 2]);
    	m[j + 3] = (ctx_data[j + 3]);
    	j += 4;

    }

    for i=16 to 64{
    	aux0 = m[u32 i - 15];
    	aux1 = m[u32 i - 2];

    	sig0 = SIG0(aux0);
    	sig1 = SIG1(aux1);
    	
    	m[i] = sig1 + m[i - 7] + sig0 + m[i - 16];
    } 


    for i=0 to 4{
    	a[i] = ctx_state[i];
    	b[i] = ctx_state[4 + i];
    	c[i] = ctx_state[8 + i];
	    d[i] = ctx_state[12 + i];
	    e[i] = ctx_state[16 + i];
	    f[i] = ctx_state[20 + i];
	    g[i] = ctx_state[24 + i];
	    h[i] = ctx_state[28 + i];
    }
    

    for i=0 to 64{

    	sig0 = EP1(e);
    	sig1 = CH(e,f,g);

    	t1[u32 0] = h[u32 0] + sig0 + sig1 + k[i] + m[u32 i];

    	sig0 = EP0(a);
    	sig1 = MAJ(a,b,c);

    	t2[u32 0] = sig0 + sig1;
        h = g;
        g = f;
        f = e;
        e[u32 0] = d[u32 0] + t1[u32 0];
        d = c;
        c = b;
        b = a;
        a[u32 0] = t1[u32 0] + t2[u32 0];
    }

    for i=0 to 4{
	    ctx_state[i] += a[i];
	    ctx_state[4 + i] += b[i];
	    ctx_state[8 + i] += c[i];
	    ctx_state[12 + i] += d[i];
	    ctx_state[16 + i] += e[i];
	    ctx_state[20 + i] += f[i];
	    ctx_state[24 + i] += g[i];
	    ctx_state[28 + i] += h[i];
	}

	return ctx_state;
}


fn sha256_init(stack u8[32] ctx_state, stack u32 ctx_datalen, stack u64 ctx_bitlen) -> stack u8[32], stack u32, stack u64
{
    ctx_datalen = 0;
    ctx_bitlen = 0;
    ctx_state[u32 0] = 0x6a09e667;
    ctx_state[u32 1] = 0xbb67ae85;
    ctx_state[u32 2] = 0x3c6ef372;
    ctx_state[u32 3] = 0xa54ff53a;
    ctx_state[u32 4] = 0x510e527f;
    ctx_state[u32 5] = 0x9b05688c;
    ctx_state[u32 6] = 0x1f83d9ab;
    ctx_state[u32 7] = 0x5be0cd19;

    return ctx_state, ctx_datalen, ctx_bitlen;
}

fn sha256_update5(stack u8[32] ctx_state, stack u8[64] ctx_data, stack u32 ctx_datalen, stack u64 ctx_bitlen, stack u8[32] data, inline int len) -> stack u8[32], stack u32, stack u64
{
    inline int i;

    for i=0 to len {

    	ctx_data[(int)ctx_datalen] = data[i];
    	ctx_datalen += 1;

    	if(ctx_datalen == 64){
    		ctx_state = sha256_transform(ctx_state, ctx_data);
    		ctx_bitlen += 512;
    		ctx_datalen = 0;
    	}
    }

    return ctx_state, ctx_datalen, ctx_bitlen;
}

fn sha256_update6(stack u8[32] ctx_state, stack u8[64] ctx_data, stack u32 ctx_datalen, stack u64 ctx_bitlen, reg u64 data, inline int len) -> stack u8[32], stack u32, stack u64
{
    inline int i;

    for i=0 to len {

    	ctx_data[(int)ctx_datalen] = (u8)[data + i];
    	ctx_datalen += 1;

    	if(ctx_datalen == 64){
    		ctx_state = sha256_transform(ctx_state, ctx_data);
    		ctx_bitlen += 512;
    		ctx_datalen = 0;
    	}
    }

    return ctx_state, ctx_datalen, ctx_bitlen;
}

fn sha256_final1(stack u8[32] ctx_state, stack u8[64] ctx_data, stack u32 ctx_datalen, stack u64 ctx_bitlen, stack u8[32] hash) -> stack u8[32]
{
    inline int i;

    reg u32[2] datalen_aux;

    i = ctx_datalen;

    // Pad whatever data is left in the buffer.
    if (ctx_datalen < 56) {
        ctx_data[i] = 0x80;
        i += 1;
        while (i < 56){
            ctx_data[i] = 0x00;
            i += 1;
        }
    }
    else {
        ctx_data[i] = 0x80;
        i += 1;
        while (i < 64){
            ctx_data[i] = 0x00;
            i += 1;
        }
        ctx_state = sha256_transform(ctx_state, ctx_data);
        for i=0 to 56{
        	ctx_data[i] = 0x00;
        }
    }

    // Append to the padding the total message's length in bits and transform.
    
    datalen_aux[0] = 0;
    datalen_aux[1] = ctx_datalen;
    ctx_bitlen += datalen_aux[u64 0] * 8;
    ctx_data[u64 7] = ctx_bitlen;
    ctx_state = sha256_transform(ctx_state, ctx_data);

    // Since this implementation uses little endian byte ordering and SHA uses big endian,
    // reverse all the bytes when copying the final state to the output hash.

    for i=0 to 4 {
        hash[i] = ctx_state[i] & 0xff;
        hash[i + 4]  = (ctx_state[i + 4]) & 0xff;
        hash[i + 8]  = (ctx_state[i + 8]) & 0xff;
        hash[i + 12] = (ctx_state[i + 12]) & 0xff;
        hash[i + 16] = (ctx_state[i + 16]) & 0xff;
        hash[i + 20] = (ctx_state[i + 20]) & 0xff;
        hash[i + 24] = (ctx_state[i + 24]) & 0xff;
        hash[i + 28] = (ctx_state[i + 28]) & 0xff;
    }

    return hash;
}


/*****************
*                *
*       H3       *
*                *
*****************/

fn H3(stack u8[32] y, reg u64 a_yp, reg u64 a_h, inline int s, stack u8[128] es) -> stack u8[128] {


	stack u8[32] hash; // unsigned char hash[SHA256_DIGEST_LENGTH];
	
	stack u8[64] ctx_data;
	stack u32 ctx_datalen;
	stack u64 ctx_bitlen;
	stack u8[32] ctx_state;

	inline int i, bitTracker;
	reg u8 b1, b2;


	ctx_state, ctx_datalen, ctx_bitlen = sha256_init(ctx_state, ctx_datalen, ctx_bitlen);

	ctx_state, ctx_datalen, ctx_bitlen = sha256_update5(ctx_state, ctx_data, ctx_datalen, ctx_bitlen, y, 20);

	ctx_state, ctx_datalen, ctx_bitlen = sha256_update6(ctx_state, ctx_data, ctx_datalen, ctx_bitlen, a_yp, 12288);

	ctx_state, ctx_datalen, ctx_bitlen = sha256_update6(ctx_state, ctx_data, ctx_datalen, ctx_bitlen, a_h, 12288);

	hash = sha256_final1(ctx_state, ctx_data, ctx_datalen, ctx_bitlen, hash);


	//Pick bits from hash
	i = 0;
	bitTracker = 0;
	while(i < s) {
		if(bitTracker >= 256) { //Generate new hash
			ctx_state, ctx_datalen, ctx_bitlen = sha256_init(ctx_state, ctx_datalen, ctx_bitlen);
			ctx_state, ctx_datalen, ctx_bitlen = sha256_update5(ctx_state, ctx_data, ctx_datalen, ctx_bitlen, hash, 32);
			hash = sha256_final1(ctx_state, ctx_data, ctx_datalen, ctx_bitlen, hash);
			bitTracker = 0;
		}

		b1 = GETBIT_EXTENDED(hash, bitTracker);
		b2 = GETBIT_EXTENDED(hash, bitTracker);

		if(b1 == 0) {
			if(b2 == 0) {
				es[i] = 0;
				bitTracker += 2;
				i += 1;
			} else {
				es[i] = 1;
				bitTracker += 2;
				i += 1;
			}
		} else {
			if(b2 == 0) {
				es[i] = 2;
				bitTracker += 2;
				i += 1;
			} else {
				bitTracker += 2;
			}
		}
	}

	return es;
}



export fn zkboo(reg u64 privateKey, reg u64 shares, reg u64 rs, reg u64 randomValues, reg u64 keys, reg u64 proofs, reg u64 views_x, reg u64 views_y, reg u64 a_yp, reg u64 a_h)
{
	stack u8[128] es;
	stack u8[32] finalHash;
	
	es = H3(finalHash, a_yp, a_h, 128, es);
}