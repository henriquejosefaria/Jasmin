


export
fn shaInit(stack u32[5] ctx_state, stack u32[2] ctx_count) -> (stack u32[5], stack u32[2]) {

	/* SHA1 initialization constants */

    ctx_state[0] = 0x67452301;
    ctx_state[1] = 0xEFCDAB89;
    ctx_state[2] = 0x98BADCFE;
    ctx_state[3] = 0x10325476;
    ctx_state[4] = 0xC3D2E1F0;
    ctx_count[0] = 0;
    ctx_count[1] = 0;
	
}


export
fn sha1Update(stack u32[5] ctx_state, stack u32[2] ctx_count, stack u8[64] ctx_buffer, u64[2] input, u64 len) -> 
(stack u32[5], stack u32[2], stack u8[64] ctx_buffer) {
	u32 i j;

	j = ctx_count[0];

	ctx_count[1] += 1 if ((ctx_count[0] += len << 3) < j);

	ctx_count[1] += (len >> 29);

	j = (j >> 3) & 63;

	if ((j + len) > 63){

		aux = 64 - j;
		memcpy(ctx_buffer[j], input, );
	}

}

{


    j = (j >> 3) & 63;
    if ((j + len) > 63)
    {
        memcpy(&context->buffer[j], data, (i = 64 - j));
        SHA1Transform(context->state, context->buffer);
        for (; i + 63 < len; i += 64)
        {
            SHA1Transform(context->state, &data[i]);
        }
        j = 0;
    }
    else
        i = 0;
    memcpy(&context->buffer[j], &data[i], len - i);
}


export
fn sha1(u64[16] hashOut, u64[2] input, u64 len) -> u64[16] {
	
	stack u32[5] ctx_state;
	stack u32[2] ctx_count;
	stack u8[64] ctx_buffer;

	inline int i;

	ctx_state, ctx_count = sha1Init(ctx_state, ctx_count);

	for i=0 to size { ctx = sha1Update(ctx_state, ctx_count, ctx_buffer, input[i], 1); }

	hashOut = sha1Final(ctx_state, ctx_count, ctx_buffer);

	return hashOut;
}
